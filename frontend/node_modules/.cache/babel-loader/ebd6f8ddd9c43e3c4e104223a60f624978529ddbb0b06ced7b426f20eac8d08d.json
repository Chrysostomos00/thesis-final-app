{"ast":null,"code":"var _jsxFileName = \"/Users/tommys/Desktop/ai14/frontend/src/components/Quiz/Teacher/QuizBuilder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { DndContext, closestCenter, PointerSensor, KeyboardSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { SortableContext, arrayMove, verticalListSortingStrategy, sortableKeyboardCoordinates } from '@dnd-kit/sortable';\nimport { v4 as uuidv4 } from 'uuid';\nimport { FaSave, FaPlus, FaArrowLeft, FaTrash, FaEye, FaEyeSlash, FaQuestionCircle, FaCheck, FaSpinner } from 'react-icons/fa';\nimport QuizGeneratorAI from './QuizGeneratorAI';\nimport QuestionEditor from './QuestionEditor'; // Θα δημιουργήσουμε αυτό το component\nimport { createTeacherQuiz, getTeacherQuizDetails, updateTeacherQuiz } from '../../../services/api';\nimport '../../../styles/QuizComponents.css'; // Κοινό CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuizBuilder() {\n  _s();\n  const {\n    quizId\n  } = useParams(); // Get quizId from URL if editing\n  const navigate = useNavigate();\n  const [quizTitle, setQuizTitle] = useState('');\n  const [quizDescription, setQuizDescription] = useState('');\n  const [questions, setQuestions] = useState([]); // Array of question objects\n  const [isPublished, setIsPublished] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [activeId, setActiveId] = useState(null); // For DnD active item\n\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n\n  // --- Utility Functions ---\n  const clearMessages = useCallback(() => {\n    setError('');\n    setSuccess('');\n  }, []);\n  const showSuccess = useCallback(msg => {\n    setSuccess(msg);\n    setError('');\n    setTimeout(clearMessages, 3000);\n  }, [clearMessages]);\n  const showError = useCallback(msg => {\n    setError(msg);\n    setSuccess('');\n  }, []);\n\n  // --- Fetch existing quiz data if editing ---\n  useEffect(() => {\n    if (quizId) {\n      setIsLoading(true);\n      showSuccess(''); // Clear previous messages\n      showError('');\n      console.log(`Fetching quiz details for ID: ${quizId}`);\n      getTeacherQuizDetails(quizId).then(response => {\n        const quizData = response.data;\n        console.log(\"Fetched quiz data:\", quizData);\n        setQuizTitle(quizData.title || '');\n        setQuizDescription(quizData.description || '');\n        setIsPublished(quizData.is_published || false);\n        // Ensure questions have unique temporary IDs for DnD and editing state\n        setQuestions(quizData.questions.map(q => ({\n          ...q,\n          tempId: uuidv4(),\n          isEditing: false\n        })) || []);\n      }).catch(err => {\n        var _err$response, _err$response$data;\n        console.error(\"Error fetching quiz details:\", err);\n        showError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || \"Failed to load quiz details.\");\n        navigate('/teacher/dashboard/quizzes'); // Redirect if loading fails\n      }).finally(() => setIsLoading(false));\n    } else {\n      // Reset state for new quiz\n      setQuizTitle('');\n      setQuizDescription('');\n      setQuestions([]);\n      setIsPublished(false);\n      setIsLoading(false);\n    }\n    // Include navigate and showError in dependencies if needed by eslint rules\n  }, [quizId, navigate, showError, showSuccess]);\n\n  // --- Handle Questions Generated by AI ---\n  const handleQuestionsGenerated = generatedQuestions => {\n    if (!Array.isArray(generatedQuestions)) {\n      showError(\"AI generation did not return a valid list of questions.\");\n      return;\n    }\n    if (generatedQuestions.length === 0 && !error) {\n      // Check error state to avoid overwriting AI error\n      showError(\"AI did not generate any questions. Try adjusting the context or parameters.\");\n      return;\n    }\n    console.log(\"Adding AI generated questions:\", generatedQuestions);\n    // Add temporary IDs and default state\n    const newQuestions = generatedQuestions.map((q, index) => ({\n      ...q,\n      id: null,\n      // AI generated questions don't have DB IDs yet\n      tempId: uuidv4(),\n      // Unique ID for React key and DnD\n      order_index: questions.length + index,\n      // Assign order based on current length\n      isEditing: false,\n      // Default to not editing\n      // Standardize choices format if needed\n      choices: Array.isArray(q.choices) ? q.choices.map((choiceText, choiceIndex) => ({\n        id: null,\n        // No DB ID yet\n        tempId: uuidv4(),\n        choice_text: typeof choiceText === 'string' ? choiceText : (choiceText === null || choiceText === void 0 ? void 0 : choiceText.choice_text) || '',\n        is_correct: typeof choiceText === 'string' && q.correct_answer === choiceText || (choiceText === null || choiceText === void 0 ? void 0 : choiceText.is_correct) === true || q.correct_answer === (choiceText === null || choiceText === void 0 ? void 0 : choiceText.choice_text)\n      })) : []\n    })).filter(q => q.question_text && q.choices.length > 0); // Basic filter for valid questions\n\n    // Ensure exactly one correct answer is marked per generated MCQ\n    newQuestions.forEach(q => {\n      if (q.question_type === 'mcq') {\n        const correctChoices = q.choices.filter(c => c.is_correct);\n        if (correctChoices.length !== 1) {\n          console.warn(`AI generated question \"${q.question_text}\" has ${correctChoices.length} correct answers. Adjusting...`);\n          // Simple fix: mark only the first choice listed as 'correct_answer' if possible, otherwise mark the first choice\n          let corrected = false;\n          q.choices.forEach((c, index) => {\n            if (!corrected && c.choice_text === q.correct_answer) {\n              c.is_correct = true;\n              corrected = true;\n            } else {\n              c.is_correct = false;\n            }\n          });\n          // If still no correct answer found (e.g., correct_answer text didn't match), mark the first one\n          if (!corrected && q.choices.length > 0) {\n            q.choices[0].is_correct = true;\n            console.warn(`Marked first choice as correct for question \"${q.question_text}\" as fallback.`);\n          }\n        }\n      }\n    });\n    setQuestions(prev => [...prev, ...newQuestions]);\n    showSuccess(`${newQuestions.length} questions generated by AI. Please review and edit.`);\n  };\n\n  // --- Handle Manual Question Add ---\n  const addEmptyQuestion = () => {\n    clearMessages();\n    const newQuestion = {\n      id: null,\n      // No DB ID yet\n      tempId: uuidv4(),\n      question_text: '',\n      question_type: 'mcq',\n      // Default to multiple choice\n      order_index: questions.length,\n      choices: [{\n        tempId: uuidv4(),\n        choice_text: '',\n        is_correct: true\n      }],\n      // Start with one correct choice\n      isEditing: true // Start in editing mode\n    };\n    setQuestions(prev => [...prev, newQuestion]);\n  };\n\n  // --- Handle Question Updates from Editor ---\n  const handleUpdateQuestion = (tempId, updatedQuestionData) => {\n    // This is called by QuestionEditor when SAVE is clicked\n    console.log(\"Updating question:\", tempId, updatedQuestionData);\n    setQuestions(prev => prev.map(q => q.tempId === tempId ? {\n      ...q,\n      ...updatedQuestionData,\n      isEditing: false\n    } // Apply updates and exit edit mode\n    : q));\n  };\n  const handleDeleteQuestion = tempId => {\n    clearMessages();\n    setQuestions(prev => prev.filter(q => q.tempId !== tempId));\n  };\n  const toggleEditMode = tempId => {\n    clearMessages();\n    setQuestions(prev => prev.map(q => q.tempId === tempId ? {\n      ...q,\n      isEditing: !q.isEditing\n    } : {\n      ...q,\n      isEditing: false\n    } // Only one editing at a time\n    ));\n  };\n\n  // --- Handle Drag and Drop Reordering ---\n  const handleDragStart = event => setActiveId(event.active.id);\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    setActiveId(null);\n    if (over && active.id !== over.id) {\n      const oldIndex = questions.findIndex(q => q.tempId === active.id);\n      const newIndex = questions.findIndex(q => q.tempId === over.id);\n      if (oldIndex !== -1 && newIndex !== -1) {\n        setQuestions(prev => {\n          const reordered = arrayMove(prev, oldIndex, newIndex);\n          // Update order_index after reordering\n          return reordered.map((q, index) => ({\n            ...q,\n            order_index: index\n          }));\n        });\n      }\n    }\n  };\n\n  // --- Handle Save Quiz ---\n  const handleSaveQuiz = async () => {\n    clearMessages();\n    if (!quizTitle.trim()) {\n      showError(\"Quiz title is required.\");\n      return;\n    }\n    if (questions.length === 0) {\n      showError(\"Quiz must have at least one question.\");\n      return;\n    }\n\n    // Basic validation before saving (e.g., ensure MCQs have a correct answer)\n    for (const q of questions) {\n      if (q.isEditing) {\n        showError(`Please save or cancel changes for question: \"${q.question_text.substring(0, 30)}...\"`);\n        return;\n      }\n      if (q.question_type === 'mcq') {\n        if (!q.choices || q.choices.length < 2) {\n          showError(`Multiple choice question \"${q.question_text.substring(0, 30)}...\" must have at least 2 choices.`);\n          return;\n        }\n        const correctCount = q.choices.filter(c => c.is_correct).length;\n        if (correctCount !== 1) {\n          showError(`Multiple choice question \"${q.question_text.substring(0, 30)}...\" must have exactly one correct answer marked.`);\n          return;\n        }\n        if (q.choices.some(c => !c.choice_text.trim())) {\n          showError(`All choices for question \"${q.question_text.substring(0, 30)}...\" must have text.`);\n          return;\n        }\n      }\n      if (!q.question_text.trim()) {\n        showError(`Question text cannot be empty (Question #${q.order_index + 1}).`);\n        return;\n      }\n    }\n    setIsSaving(true);\n    showError('');\n    showSuccess('');\n\n    // Prepare data for API (map frontend state to backend expected format)\n    const quizDataPayload = {\n      title: quizTitle.trim(),\n      description: quizDescription.trim(),\n      is_published: isPublished,\n      questions: questions.map(q => ({\n        id: q.id,\n        // Send existing ID if updating, null if new\n        question_text: q.question_text,\n        question_type: q.question_type,\n        order_index: q.order_index,\n        // Prepare choices, removing temporary IDs\n        choices: q.question_type === 'mcq' ? q.choices.map(c => ({\n          id: c.id,\n          // Send existing ID if updating, null if new\n          choice_text: c.choice_text,\n          is_correct: c.is_correct\n        })) : [] // Send empty array for non-mcq for now\n      }))\n    };\n    console.log(\"Saving/Updating Quiz Payload:\", quizDataPayload);\n    try {\n      let response;\n      if (quizId) {\n        // Update existing quiz\n        response = await updateTeacherQuiz(quizId, quizDataPayload);\n        showSuccess(\"Quiz updated successfully!\");\n        // Optionally update local state if needed, though often navigating away\n        // If staying on page, might need to refresh question IDs/tempIds\n      } else {\n        // Create new quiz\n        response = await createTeacherQuiz(quizDataPayload);\n        showSuccess(\"Quiz created successfully!\");\n        // Navigate to the edit page of the newly created quiz (or quiz list)\n        navigate(`/teacher/dashboard/quizzes/edit/${response.data.id}`);\n      }\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error(\"Error saving quiz:\", err);\n      showError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || \"Failed to save quiz.\");\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-fullscreen\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(FaSpinner, {\n        className: \"spin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 53\n      }, this), \" Loading Quiz...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-builder-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/teacher/dashboard/quizzes'),\n        className: \"subtle-button back-button\",\n        children: [/*#__PURE__*/_jsxDEV(FaArrowLeft, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 21\n        }, this), \" Back to Quizzes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: quizId ? 'Edit Quiz' : 'Create New Quiz'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveQuiz,\n        disabled: isSaving || questions.some(q => q.isEditing),\n        children: [/*#__PURE__*/_jsxDEV(FaSave, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 21\n        }, this), \" \", isSaving ? 'Saving...' : quizId ? 'Update Quiz' : 'Save Quiz']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 14\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message error-message global-message\",\n      children: [error, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearMessages,\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 85\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 23\n    }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message success-message global-message\",\n      children: [success, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearMessages,\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 91\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-builder-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-metadata widget\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Quiz Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"quiz-title\",\n            children: [\"Quiz Title \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"required\",\n              children: \"*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 65\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"quiz-title\",\n            value: quizTitle,\n            onChange: e => setQuizTitle(e.target.value),\n            placeholder: \"Enter a title for the quiz\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"quiz-description\",\n            children: \"Description (Optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"quiz-description\",\n            rows: \"3\",\n            value: quizDescription,\n            onChange: e => setQuizDescription(e.target.value),\n            placeholder: \"Provide instructions or context for the student\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group publish-toggle\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"quiz-publish\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"quiz-publish\",\n              checked: isPublished,\n              onChange: e => setIsPublished(e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 29\n            }, this), isPublished ? /*#__PURE__*/_jsxDEV(FaEye, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(FaEyeSlash, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 56\n            }, this), isPublished ? ' Published (Visible to Students)' : ' Draft (Hidden from Students)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"hint-text\",\n            children: \"(You can change this later)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 18\n      }, this), !quizId &&\n      /*#__PURE__*/\n      // Only show generator when creating a new quiz for simplicity\n      _jsxDEV(QuizGeneratorAI, {\n        onQuestionsGenerated: handleQuestionsGenerated,\n        showLoading: setIsSaving // Reuse saving state as general loading indicator\n        ,\n        hideLoading: () => setIsSaving(false),\n        showError: showError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-questions-area widget\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Questions (\", questions.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n          sensors: sensors,\n          collisionDetection: closestCenter,\n          onDragStart: handleDragStart,\n          onDragEnd: handleDragEnd,\n          children: /*#__PURE__*/_jsxDEV(SortableContext, {\n            items: questions.map(q => q.tempId),\n            strategy: verticalListSortingStrategy,\n            children: questions.map((q, index) => /*#__PURE__*/_jsxDEV(QuestionEditor, {\n              questionData: q // Pass the full question object\n              ,\n              index: index,\n              onUpdate: updatedData => handleUpdateQuestion(q.tempId, updatedData),\n              onDelete: () => handleDeleteQuestion(q.tempId),\n              isEditing: q.isEditing // Pass edit state\n              ,\n              onToggleEdit: () => toggleEditMode(q.tempId) // Pass handler to toggle edit\n              ,\n              activeId: activeId // For Sortable styling if needed\n            }, q.tempId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addEmptyQuestion,\n          className: \"add-question-button\",\n          children: [/*#__PURE__*/_jsxDEV(FaPlus, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 25\n          }, this), \" Add Question Manually\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 9\n  }, this);\n}\n_s(QuizBuilder, \"OaNCdR6WuvHpmJ0EsVw38rkolGU=\", false, function () {\n  return [useParams, useNavigate, useSensors, useSensor, useSensor];\n});\n_c = QuizBuilder;\nexport default QuizBuilder;\nvar _c;\n$RefreshReg$(_c, \"QuizBuilder\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","DndContext","closestCenter","PointerSensor","KeyboardSensor","useSensor","useSensors","SortableContext","arrayMove","verticalListSortingStrategy","sortableKeyboardCoordinates","v4","uuidv4","FaSave","FaPlus","FaArrowLeft","FaTrash","FaEye","FaEyeSlash","FaQuestionCircle","FaCheck","FaSpinner","QuizGeneratorAI","QuestionEditor","createTeacherQuiz","getTeacherQuizDetails","updateTeacherQuiz","jsxDEV","_jsxDEV","QuizBuilder","_s","quizId","navigate","quizTitle","setQuizTitle","quizDescription","setQuizDescription","questions","setQuestions","isPublished","setIsPublished","isLoading","setIsLoading","isSaving","setIsSaving","error","setError","success","setSuccess","activeId","setActiveId","sensors","coordinateGetter","clearMessages","showSuccess","msg","setTimeout","showError","console","log","then","response","quizData","data","title","description","is_published","map","q","tempId","isEditing","catch","err","_err$response","_err$response$data","finally","handleQuestionsGenerated","generatedQuestions","Array","isArray","length","newQuestions","index","id","order_index","choices","choiceText","choiceIndex","choice_text","is_correct","correct_answer","filter","question_text","forEach","question_type","correctChoices","c","warn","corrected","prev","addEmptyQuestion","newQuestion","handleUpdateQuestion","updatedQuestionData","handleDeleteQuestion","toggleEditMode","handleDragStart","event","active","handleDragEnd","over","oldIndex","findIndex","newIndex","reordered","handleSaveQuiz","trim","substring","correctCount","some","quizDataPayload","_err$response2","_err$response2$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","htmlFor","type","value","onChange","e","target","placeholder","required","rows","checked","onQuestionsGenerated","showLoading","hideLoading","collisionDetection","onDragStart","onDragEnd","items","strategy","questionData","onUpdate","updatedData","onDelete","onToggleEdit","_c","$RefreshReg$"],"sources":["/Users/tommys/Desktop/ai14/frontend/src/components/Quiz/Teacher/QuizBuilder.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { DndContext, closestCenter, PointerSensor, KeyboardSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { SortableContext, arrayMove, verticalListSortingStrategy, sortableKeyboardCoordinates } from '@dnd-kit/sortable';\nimport { v4 as uuidv4 } from 'uuid';\nimport { FaSave, FaPlus, FaArrowLeft, FaTrash, FaEye, FaEyeSlash, FaQuestionCircle, FaCheck,  FaSpinner } from 'react-icons/fa';\n\nimport QuizGeneratorAI from './QuizGeneratorAI';\nimport QuestionEditor from './QuestionEditor'; // Θα δημιουργήσουμε αυτό το component\nimport { createTeacherQuiz, getTeacherQuizDetails, updateTeacherQuiz } from '../../../services/api';\nimport '../../../styles/QuizComponents.css'; // Κοινό CSS\n\nfunction QuizBuilder() {\n    const { quizId } = useParams(); // Get quizId from URL if editing\n    const navigate = useNavigate();\n    const [quizTitle, setQuizTitle] = useState('');\n    const [quizDescription, setQuizDescription] = useState('');\n    const [questions, setQuestions] = useState([]); // Array of question objects\n    const [isPublished, setIsPublished] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isSaving, setIsSaving] = useState(false);\n    const [error, setError] = useState('');\n    const [success, setSuccess] = useState('');\n    const [activeId, setActiveId] = useState(null); // For DnD active item\n\n    const sensors = useSensors(\n        useSensor(PointerSensor),\n        useSensor(KeyboardSensor, { coordinateGetter: sortableKeyboardCoordinates })\n    );\n\n    // --- Utility Functions ---\n    const clearMessages = useCallback(() => { setError(''); setSuccess(''); }, []);\n    const showSuccess = useCallback((msg) => { setSuccess(msg); setError(''); setTimeout(clearMessages, 3000); }, [clearMessages]);\n    const showError = useCallback((msg) => { setError(msg); setSuccess(''); }, []);\n\n    // --- Fetch existing quiz data if editing ---\n    useEffect(() => {\n        if (quizId) {\n            setIsLoading(true);\n            showSuccess(''); // Clear previous messages\n            showError('');\n            console.log(`Fetching quiz details for ID: ${quizId}`);\n            getTeacherQuizDetails(quizId)\n                .then(response => {\n                    const quizData = response.data;\n                    console.log(\"Fetched quiz data:\", quizData);\n                    setQuizTitle(quizData.title || '');\n                    setQuizDescription(quizData.description || '');\n                    setIsPublished(quizData.is_published || false);\n                    // Ensure questions have unique temporary IDs for DnD and editing state\n                    setQuestions(quizData.questions.map(q => ({ ...q, tempId: uuidv4(), isEditing: false })) || []);\n                })\n                .catch(err => {\n                    console.error(\"Error fetching quiz details:\", err);\n                    showError(err.response?.data?.error || \"Failed to load quiz details.\");\n                    navigate('/teacher/dashboard/quizzes'); // Redirect if loading fails\n                })\n                .finally(() => setIsLoading(false));\n        } else {\n             // Reset state for new quiz\n             setQuizTitle('');\n             setQuizDescription('');\n             setQuestions([]);\n             setIsPublished(false);\n             setIsLoading(false);\n        }\n        // Include navigate and showError in dependencies if needed by eslint rules\n    }, [quizId, navigate, showError, showSuccess]);\n\n    // --- Handle Questions Generated by AI ---\n    const handleQuestionsGenerated = (generatedQuestions) => {\n        if (!Array.isArray(generatedQuestions)) {\n            showError(\"AI generation did not return a valid list of questions.\");\n            return;\n        }\n         if (generatedQuestions.length === 0 && !error) { // Check error state to avoid overwriting AI error\n            showError(\"AI did not generate any questions. Try adjusting the context or parameters.\");\n            return;\n        }\n        console.log(\"Adding AI generated questions:\", generatedQuestions);\n        // Add temporary IDs and default state\n        const newQuestions = generatedQuestions.map((q, index) => ({\n            ...q,\n            id: null, // AI generated questions don't have DB IDs yet\n            tempId: uuidv4(), // Unique ID for React key and DnD\n            order_index: questions.length + index, // Assign order based on current length\n            isEditing: false, // Default to not editing\n            // Standardize choices format if needed\n            choices: Array.isArray(q.choices) ? q.choices.map((choiceText, choiceIndex) => ({\n                id: null, // No DB ID yet\n                tempId: uuidv4(),\n                choice_text: typeof choiceText === 'string' ? choiceText : (choiceText?.choice_text || ''),\n                is_correct: (typeof choiceText === 'string' && q.correct_answer === choiceText) || (choiceText?.is_correct === true) || (q.correct_answer === choiceText?.choice_text)\n            })) : [],\n        })).filter(q => q.question_text && q.choices.length > 0); // Basic filter for valid questions\n\n        // Ensure exactly one correct answer is marked per generated MCQ\n        newQuestions.forEach(q => {\n            if (q.question_type === 'mcq') {\n                const correctChoices = q.choices.filter(c => c.is_correct);\n                if (correctChoices.length !== 1) {\n                     console.warn(`AI generated question \"${q.question_text}\" has ${correctChoices.length} correct answers. Adjusting...`);\n                     // Simple fix: mark only the first choice listed as 'correct_answer' if possible, otherwise mark the first choice\n                     let corrected = false;\n                     q.choices.forEach((c, index) => {\n                          if (!corrected && c.choice_text === q.correct_answer) {\n                               c.is_correct = true;\n                               corrected = true;\n                          } else {\n                               c.is_correct = false;\n                          }\n                     });\n                     // If still no correct answer found (e.g., correct_answer text didn't match), mark the first one\n                     if (!corrected && q.choices.length > 0) {\n                          q.choices[0].is_correct = true;\n                          console.warn(`Marked first choice as correct for question \"${q.question_text}\" as fallback.`);\n                     }\n                }\n            }\n        });\n\n\n        setQuestions(prev => [...prev, ...newQuestions]);\n        showSuccess(`${newQuestions.length} questions generated by AI. Please review and edit.`);\n    };\n\n    // --- Handle Manual Question Add ---\n    const addEmptyQuestion = () => {\n        clearMessages();\n        const newQuestion = {\n            id: null, // No DB ID yet\n            tempId: uuidv4(),\n            question_text: '',\n            question_type: 'mcq', // Default to multiple choice\n            order_index: questions.length,\n            choices: [{ tempId: uuidv4(), choice_text: '', is_correct: true }], // Start with one correct choice\n            isEditing: true, // Start in editing mode\n        };\n        setQuestions(prev => [...prev, newQuestion]);\n    };\n\n    // --- Handle Question Updates from Editor ---\n    const handleUpdateQuestion = (tempId, updatedQuestionData) => {\n         // This is called by QuestionEditor when SAVE is clicked\n         console.log(\"Updating question:\", tempId, updatedQuestionData);\n        setQuestions(prev => prev.map(q =>\n            q.tempId === tempId\n            ? { ...q, ...updatedQuestionData, isEditing: false } // Apply updates and exit edit mode\n            : q\n        ));\n    };\n\n    const handleDeleteQuestion = (tempId) => {\n        clearMessages();\n        setQuestions(prev => prev.filter(q => q.tempId !== tempId));\n    };\n\n    const toggleEditMode = (tempId) => {\n         clearMessages();\n         setQuestions(prev => prev.map(q =>\n            q.tempId === tempId ? { ...q, isEditing: !q.isEditing } : { ...q, isEditing: false } // Only one editing at a time\n        ));\n    };\n\n    // --- Handle Drag and Drop Reordering ---\n    const handleDragStart = (event) => setActiveId(event.active.id);\n\n    const handleDragEnd = (event) => {\n        const { active, over } = event;\n        setActiveId(null);\n\n        if (over && active.id !== over.id) {\n             const oldIndex = questions.findIndex(q => q.tempId === active.id);\n             const newIndex = questions.findIndex(q => q.tempId === over.id);\n\n            if (oldIndex !== -1 && newIndex !== -1) {\n                setQuestions(prev => {\n                     const reordered = arrayMove(prev, oldIndex, newIndex);\n                     // Update order_index after reordering\n                     return reordered.map((q, index) => ({ ...q, order_index: index }));\n                 });\n            }\n        }\n    };\n\n    // --- Handle Save Quiz ---\n    const handleSaveQuiz = async () => {\n        clearMessages();\n        if (!quizTitle.trim()) { showError(\"Quiz title is required.\"); return; }\n        if (questions.length === 0) { showError(\"Quiz must have at least one question.\"); return; }\n\n        // Basic validation before saving (e.g., ensure MCQs have a correct answer)\n        for (const q of questions) {\n            if (q.isEditing) {\n                showError(`Please save or cancel changes for question: \"${q.question_text.substring(0,30)}...\"`);\n                return;\n            }\n            if (q.question_type === 'mcq') {\n                 if (!q.choices || q.choices.length < 2) {\n                     showError(`Multiple choice question \"${q.question_text.substring(0,30)}...\" must have at least 2 choices.`);\n                     return;\n                 }\n                const correctCount = q.choices.filter(c => c.is_correct).length;\n                if (correctCount !== 1) {\n                     showError(`Multiple choice question \"${q.question_text.substring(0,30)}...\" must have exactly one correct answer marked.`);\n                     return;\n                }\n                if (q.choices.some(c => !c.choice_text.trim())) {\n                     showError(`All choices for question \"${q.question_text.substring(0,30)}...\" must have text.`);\n                     return;\n                }\n            }\n             if (!q.question_text.trim()) {\n                showError(`Question text cannot be empty (Question #${q.order_index + 1}).`);\n                return;\n            }\n        }\n\n\n        setIsSaving(true);\n        showError('');\n        showSuccess('');\n\n        // Prepare data for API (map frontend state to backend expected format)\n        const quizDataPayload = {\n            title: quizTitle.trim(),\n            description: quizDescription.trim(),\n            is_published: isPublished,\n            questions: questions.map(q => ({\n                id: q.id, // Send existing ID if updating, null if new\n                question_text: q.question_text,\n                question_type: q.question_type,\n                order_index: q.order_index,\n                // Prepare choices, removing temporary IDs\n                choices: q.question_type === 'mcq' ? q.choices.map(c => ({\n                     id: c.id, // Send existing ID if updating, null if new\n                     choice_text: c.choice_text,\n                     is_correct: c.is_correct\n                 })) : [] // Send empty array for non-mcq for now\n            }))\n        };\n\n        console.log(\"Saving/Updating Quiz Payload:\", quizDataPayload);\n\n        try {\n            let response;\n            if (quizId) {\n                // Update existing quiz\n                response = await updateTeacherQuiz(quizId, quizDataPayload);\n                showSuccess(\"Quiz updated successfully!\");\n                // Optionally update local state if needed, though often navigating away\n                // If staying on page, might need to refresh question IDs/tempIds\n            } else {\n                // Create new quiz\n                response = await createTeacherQuiz(quizDataPayload);\n                showSuccess(\"Quiz created successfully!\");\n                // Navigate to the edit page of the newly created quiz (or quiz list)\n                navigate(`/teacher/dashboard/quizzes/edit/${response.data.id}`);\n            }\n        } catch (err) {\n            console.error(\"Error saving quiz:\", err);\n            showError(err.response?.data?.error || \"Failed to save quiz.\");\n        } finally {\n            setIsSaving(false);\n        }\n    };\n\n\n    if (isLoading) {\n        return <div className='loading-fullscreen'> <FaSpinner className='spin' /> Loading Quiz...</div>;\n    }\n\n    return (\n        <div className=\"quiz-builder-page\">\n             <div className=\"page-header\">\n                <button onClick={() => navigate('/teacher/dashboard/quizzes')} className='subtle-button back-button'>\n                    <FaArrowLeft /> Back to Quizzes\n                </button>\n                <h2>{quizId ? 'Edit Quiz' : 'Create New Quiz'}</h2>\n                <button onClick={handleSaveQuiz} disabled={isSaving || questions.some(q => q.isEditing)}>\n                    <FaSave /> {isSaving ? 'Saving...' : (quizId ? 'Update Quiz' : 'Save Quiz')}\n                </button>\n             </div>\n\n            {error && <div className=\"message error-message global-message\">{error} <button onClick={clearMessages}>X</button></div>}\n            {success && <div className=\"message success-message global-message\">{success} <button onClick={clearMessages}>X</button></div>}\n\n             <div className=\"quiz-builder-container\">\n                 {/* Quiz Metadata */}\n                 <div className=\"quiz-metadata widget\">\n                     <h3>Quiz Details</h3>\n                     <div className=\"form-group\">\n                         <label htmlFor=\"quiz-title\">Quiz Title <span className=\"required\">*</span></label>\n                         <input\n                            type=\"text\"\n                            id=\"quiz-title\"\n                            value={quizTitle}\n                            onChange={(e) => setQuizTitle(e.target.value)}\n                            placeholder=\"Enter a title for the quiz\"\n                            required\n                         />\n                     </div>\n                     <div className=\"form-group\">\n                         <label htmlFor=\"quiz-description\">Description (Optional)</label>\n                         <textarea\n                             id=\"quiz-description\"\n                             rows=\"3\"\n                             value={quizDescription}\n                             onChange={(e) => setQuizDescription(e.target.value)}\n                             placeholder=\"Provide instructions or context for the student\"\n                          />\n                     </div>\n                     <div className=\"form-group publish-toggle\">\n                         <label htmlFor=\"quiz-publish\">\n                            <input\n                                type=\"checkbox\"\n                                id=\"quiz-publish\"\n                                checked={isPublished}\n                                onChange={(e) => setIsPublished(e.target.checked)}\n                             />\n                             {isPublished ? <FaEye/> : <FaEyeSlash/>}\n                              {isPublished ? ' Published (Visible to Students)' : ' Draft (Hidden from Students)'}\n                         </label>\n                          <span className=\"hint-text\">(You can change this later)</span>\n                     </div>\n                 </div>\n\n                 {/* AI Generator (only shows if creating new or maybe as option?) */}\n                 {!quizId && ( // Only show generator when creating a new quiz for simplicity\n                     <QuizGeneratorAI\n                         onQuestionsGenerated={handleQuestionsGenerated}\n                         showLoading={setIsSaving} // Reuse saving state as general loading indicator\n                         hideLoading={() => setIsSaving(false)}\n                         showError={showError}\n                     />\n                 )}\n\n                 {/* Questions Area */}\n                 <div className=\"quiz-questions-area widget\">\n                    <h3>Questions ({questions.length})</h3>\n                    <DndContext\n                        sensors={sensors}\n                        collisionDetection={closestCenter}\n                        onDragStart={handleDragStart}\n                        onDragEnd={handleDragEnd}\n                    >\n                        <SortableContext items={questions.map(q => q.tempId)} strategy={verticalListSortingStrategy}>\n                            {questions.map((q, index) => (\n                                <QuestionEditor\n                                    key={q.tempId}\n                                    questionData={q} // Pass the full question object\n                                    index={index}\n                                    onUpdate={(updatedData) => handleUpdateQuestion(q.tempId, updatedData)}\n                                    onDelete={() => handleDeleteQuestion(q.tempId)}\n                                    isEditing={q.isEditing} // Pass edit state\n                                    onToggleEdit={() => toggleEditMode(q.tempId)} // Pass handler to toggle edit\n                                    activeId={activeId} // For Sortable styling if needed\n                                />\n                            ))}\n                        </SortableContext>\n                     </DndContext>\n\n                    <button onClick={addEmptyQuestion} className=\"add-question-button\">\n                        <FaPlus /> Add Question Manually\n                    </button>\n                 </div>\n             </div>\n        </div>\n    );\n}\n\nexport default QuizBuilder;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}