{"ast":null,"code":"var _jsxFileName = \"/Users/tommys/Desktop/ai14/frontend/src/components/Dashboard/Sandbox.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/Dashboard/Sandbox.js\nimport React, { useState, useEffect } from 'react';\nimport { generateTestResponse } from '../../services/api'; // API function\nimport { FaPaperPlane, FaSpinner, FaVial, FaLightbulb, FaBroom } from 'react-icons/fa'; // Added FaBroom\nimport '../../styles/TeacherDashboard.css'; // General styles from parent\nimport '../../styles/Sandbox.css'; // Specific sandbox styles\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Sandbox({\n  currentPromptStructure,\n  // Current array of blocks from the canvas\n  promptIdToUseIfNoStructure,\n  // ID of the loaded prompt (can be null if new prompt)\n  showError,\n  // Prop function to display errors\n  showSuccess,\n  // Prop function to display success\n  clearMessages // Prop function to clear messages\n}) {\n  _s();\n  const [userTestPrompt, setUserTestPrompt] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [usageInfo, setUsageInfo] = useState(null);\n  const [previewSystemPrompt, setPreviewSystemPrompt] = useState('');\n  useEffect(() => {\n    // This useEffect is primarily for displaying a *preview* of the system prompt.\n    // The actual construction and material resolution will happen on the backend.\n    let displayPrompt = '(No prompt instructions defined yet. Add blocks to the canvas or load an assistant.)';\n    if (currentPromptStructure && currentPromptStructure.length > 0) {\n      displayPrompt = currentPromptStructure.map(block => {\n        if (block.isMaterialBlock && block.materialName) {\n          // Indicate that full text will be used\n          return `[CONTEXT FROM: ${block.materialName} - Full text will be used by AI]`;\n        }\n        return block.content;\n      }).join(\"\\n\\n\");\n    } else if (promptIdToUseIfNoStructure) {\n      // If canvas is empty but a prompt is \"loaded\" (meaning its ID is known)\n      displayPrompt = `(Testing saved assistant [ID: ${promptIdToUseIfNoStructure}]. The AI will use its saved instructions.)`;\n    }\n    setPreviewSystemPrompt(displayPrompt);\n  }, [currentPromptStructure, promptIdToUseIfNoStructure]);\n  const handleTestPrompt = async () => {\n    if (clearMessages) clearMessages();\n    if (!userTestPrompt.trim()) {\n      if (showError) showError(\"Please enter a question or phrase in the sandbox to test.\");\n      return;\n    }\n\n    // Ensure there are instructions to send or a loaded prompt ID\n    if ((!currentPromptStructure || currentPromptStructure.length === 0) && !promptIdToUseIfNoStructure) {\n      if (showError) showError(\"Please add blocks to the canvas or load a saved assistant before testing.\");\n      return;\n    }\n    setIsLoading(true);\n    setAiResponse('');\n    setUsageInfo(null);\n\n    // Prepare payload for the backend\n    // The backend will handle constructing the final system prompt from either structure or prompt_id\n    const payload = {\n      user_prompt: userTestPrompt,\n      prompt_structure: currentPromptStructure,\n      // Send current blocks from canvas\n      prompt_id: promptIdToUseIfNoStructure // Send ID of the loaded prompt (if any)\n    };\n    try {\n      console.log(\"Sandbox sending payload to /api/generate:\", JSON.stringify(payload, null, 2));\n      const response = await generateTestResponse(payload); // Pass the whole payload\n      setAiResponse(response.data.response);\n      setUsageInfo(response.data.usage);\n      if (showSuccess) showSuccess(\"AI response received successfully.\");\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Sandbox generation error:', error);\n      const errMsg = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'An error occurred while generating the response in the sandbox.';\n      if (showError) showError(errMsg);\n      setAiResponse(`Error: ${errMsg}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const clearSandbox = () => {\n    setUserTestPrompt('');\n    setAiResponse('');\n    setUsageInfo(null);\n    if (clearMessages) clearMessages();\n  };\n  const canTest = userTestPrompt.trim() !== '' && !previewSystemPrompt.startsWith('(No prompt instructions defined yet') && !previewSystemPrompt.startsWith('(Testing saved assistant [ID:');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"widget sandbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [/*#__PURE__*/_jsxDEV(FaVial, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), \" Test Sandbox\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sandbox-instruction\",\n      children: [/*#__PURE__*/_jsxDEV(FaLightbulb, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 18\n      }, this), \" Test your AI Assistant based on the current instructions in the canvas or the loaded assistant.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sandbox-system-preview\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Preview of Instructions (Backend will process fully):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: previewSystemPrompt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sandbox-input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: userTestPrompt,\n        onChange: e => setUserTestPrompt(e.target.value),\n        placeholder: \"Enter a student's question or phrase here...\",\n        rows: 4,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sandbox-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clearSandbox,\n          className: \"button subtle-button\",\n          disabled: isLoading,\n          title: \"Clear sandbox inputs and response\",\n          children: [/*#__PURE__*/_jsxDEV(FaBroom, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), \" Clear\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTestPrompt,\n          className: \"button primary-button\",\n          disabled: isLoading || !userTestPrompt.trim() || previewSystemPrompt.startsWith('(No prompt') // Simplified disabled logic\n          ,\n          children: isLoading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(FaSpinner, {\n              className: \"spin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 40\n            }, this), \" Testing...\"]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(FaPaperPlane, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 89\n            }, this), \" Test Prompt\"]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sandbox-output-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"AI Response:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-indicator-sandbox\",\n        children: [/*#__PURE__*/_jsxDEV(FaSpinner, {\n          className: \"spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 74\n        }, this), \" Thinking...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 31\n      }, this), aiResponse && !isLoading && /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: \"ai-response-text\",\n        children: aiResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 46\n      }, this), !aiResponse && !isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"empty-list-message\",\n        style: {\n          padding: '1rem',\n          fontSize: '0.9em'\n        },\n        children: \"(AI's response will appear here)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 47\n      }, this), usageInfo && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"usage-info\",\n        children: [\"(Tokens Used: Prompt=\", usageInfo.prompt_tokens, \", Completion=\", usageInfo.completion_tokens, \", Total=\", usageInfo.total_tokens, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n_s(Sandbox, \"gqL8AgdGR8flWxfmnP/ziwq5Vss=\");\n_c = Sandbox;\nexport default Sandbox;\nvar _c;\n$RefreshReg$(_c, \"Sandbox\");","map":{"version":3,"names":["React","useState","useEffect","generateTestResponse","FaPaperPlane","FaSpinner","FaVial","FaLightbulb","FaBroom","jsxDEV","_jsxDEV","Fragment","_Fragment","Sandbox","currentPromptStructure","promptIdToUseIfNoStructure","showError","showSuccess","clearMessages","_s","userTestPrompt","setUserTestPrompt","aiResponse","setAiResponse","isLoading","setIsLoading","usageInfo","setUsageInfo","previewSystemPrompt","setPreviewSystemPrompt","displayPrompt","length","map","block","isMaterialBlock","materialName","content","join","handleTestPrompt","trim","payload","user_prompt","prompt_structure","prompt_id","console","log","JSON","stringify","response","data","usage","error","_error$response","_error$response$data","errMsg","clearSandbox","canTest","startsWith","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","rows","disabled","onClick","title","style","padding","fontSize","prompt_tokens","completion_tokens","total_tokens","_c","$RefreshReg$"],"sources":["/Users/tommys/Desktop/ai14/frontend/src/components/Dashboard/Sandbox.js"],"sourcesContent":["// frontend/src/components/Dashboard/Sandbox.js\nimport React, { useState, useEffect } from 'react';\nimport { generateTestResponse } from '../../services/api'; // API function\nimport { FaPaperPlane, FaSpinner, FaVial, FaLightbulb, FaBroom } from 'react-icons/fa'; // Added FaBroom\nimport '../../styles/TeacherDashboard.css'; // General styles from parent\nimport '../../styles/Sandbox.css';         // Specific sandbox styles\n\nfunction Sandbox({\n    currentPromptStructure,     // Current array of blocks from the canvas\n    promptIdToUseIfNoStructure, // ID of the loaded prompt (can be null if new prompt)\n    showError,                  // Prop function to display errors\n    showSuccess,                // Prop function to display success\n    clearMessages               // Prop function to clear messages\n}) {\n    const [userTestPrompt, setUserTestPrompt] = useState('');\n    const [aiResponse, setAiResponse] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [usageInfo, setUsageInfo] = useState(null);\n    const [previewSystemPrompt, setPreviewSystemPrompt] = useState('');\n\n    useEffect(() => {\n        // This useEffect is primarily for displaying a *preview* of the system prompt.\n        // The actual construction and material resolution will happen on the backend.\n        let displayPrompt = '(No prompt instructions defined yet. Add blocks to the canvas or load an assistant.)';\n\n        if (currentPromptStructure && currentPromptStructure.length > 0) {\n            displayPrompt = currentPromptStructure.map(block => {\n                if (block.isMaterialBlock && block.materialName) {\n                    // Indicate that full text will be used\n                    return `[CONTEXT FROM: ${block.materialName} - Full text will be used by AI]`;\n                }\n                return block.content;\n            }).join(\"\\n\\n\");\n        } else if (promptIdToUseIfNoStructure) {\n            // If canvas is empty but a prompt is \"loaded\" (meaning its ID is known)\n            displayPrompt = `(Testing saved assistant [ID: ${promptIdToUseIfNoStructure}]. The AI will use its saved instructions.)`;\n        }\n        setPreviewSystemPrompt(displayPrompt);\n    }, [currentPromptStructure, promptIdToUseIfNoStructure]);\n\n\n    const handleTestPrompt = async () => {\n        if (clearMessages) clearMessages();\n\n        if (!userTestPrompt.trim()) {\n            if (showError) showError(\"Please enter a question or phrase in the sandbox to test.\");\n            return;\n        }\n\n        // Ensure there are instructions to send or a loaded prompt ID\n        if ((!currentPromptStructure || currentPromptStructure.length === 0) && !promptIdToUseIfNoStructure) {\n             if (showError) showError(\"Please add blocks to the canvas or load a saved assistant before testing.\");\n             return;\n        }\n\n        setIsLoading(true);\n        setAiResponse('');\n        setUsageInfo(null);\n\n        // Prepare payload for the backend\n        // The backend will handle constructing the final system prompt from either structure or prompt_id\n        const payload = {\n            user_prompt: userTestPrompt,\n            prompt_structure: currentPromptStructure,     // Send current blocks from canvas\n            prompt_id: promptIdToUseIfNoStructure       // Send ID of the loaded prompt (if any)\n        };\n\n        try {\n            console.log(\"Sandbox sending payload to /api/generate:\", JSON.stringify(payload, null, 2));\n            const response = await generateTestResponse(payload); // Pass the whole payload\n            setAiResponse(response.data.response);\n            setUsageInfo(response.data.usage);\n            if (showSuccess) showSuccess(\"AI response received successfully.\");\n        } catch (error) {\n            console.error('Sandbox generation error:', error);\n            const errMsg = error.response?.data?.error || 'An error occurred while generating the response in the sandbox.';\n            if (showError) showError(errMsg);\n            setAiResponse(`Error: ${errMsg}`);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const clearSandbox = () => {\n        setUserTestPrompt('');\n        setAiResponse('');\n        setUsageInfo(null);\n        if (clearMessages) clearMessages();\n    };\n\n    const canTest = userTestPrompt.trim() !== '' &&\n                    !previewSystemPrompt.startsWith('(No prompt instructions defined yet') &&\n                    !previewSystemPrompt.startsWith('(Testing saved assistant [ID:');\n\n\n    return (\n        <div className=\"widget sandbox\">\n            <h3><FaVial /> Test Sandbox</h3>\n            <p className=\"sandbox-instruction\">\n                 <FaLightbulb /> Test your AI Assistant based on the current instructions in the canvas or the loaded assistant.\n            </p>\n\n            <div className=\"sandbox-system-preview\">\n                 <strong>Preview of Instructions (Backend will process fully):</strong>\n                 <pre>{previewSystemPrompt}</pre>\n            </div>\n\n            <div className=\"sandbox-input-area\">\n                <textarea\n                    value={userTestPrompt}\n                    onChange={(e) => setUserTestPrompt(e.target.value)}\n                    placeholder=\"Enter a student's question or phrase here...\"\n                    rows={4}\n                    disabled={isLoading}\n                />\n                <div className=\"sandbox-actions\">\n                    <button onClick={clearSandbox} className=\"button subtle-button\" disabled={isLoading} title=\"Clear sandbox inputs and response\">\n                        <FaBroom /> Clear\n                    </button>\n                    <button\n                        onClick={handleTestPrompt}\n                        className=\"button primary-button\"\n                        disabled={isLoading || !userTestPrompt.trim() || previewSystemPrompt.startsWith('(No prompt')} // Simplified disabled logic\n                    >\n                        {isLoading ? <><FaSpinner className=\"spin\" /> Testing...</> : <><FaPaperPlane /> Test Prompt</>}\n                    </button>\n                </div>\n            </div>\n\n            <div className=\"sandbox-output-area\">\n                <strong>AI Response:</strong>\n                {isLoading && <div className=\"loading-indicator-sandbox\"><FaSpinner className=\"spin\" /> Thinking...</div>}\n                {aiResponse && !isLoading && <pre className=\"ai-response-text\">{aiResponse}</pre>}\n                {!aiResponse && !isLoading && <p className=\"empty-list-message\" style={{padding: '1rem', fontSize:'0.9em'}}>(AI's response will appear here)</p>}\n                {usageInfo && (\n                    <p className=\"usage-info\">\n                        (Tokens Used: Prompt={usageInfo.prompt_tokens}, Completion={usageInfo.completion_tokens}, Total={usageInfo.total_tokens})\n                    </p>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default Sandbox;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}