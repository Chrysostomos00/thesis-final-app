{"ast":null,"code":"var _jsxFileName = \"/Users/tommys/Desktop/ai14/frontend/src/components/Dashboard/PromptWorkshop.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/Dashboard/PromptWorkshop.js\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { DndContext, DragOverlay, closestCenter, PointerSensor, KeyboardSensor, useSensor, useSensors, MeasuringStrategy } from '@dnd-kit/core';\nimport { SortableContext, arrayMove, verticalListSortingStrategy, sortableKeyboardCoordinates } from '@dnd-kit/sortable';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Import Workshop Specific Components\nimport BlockPalette from './BlockPalette';\nimport PromptBuilder from './PromptBuilder/PromptBuilder';\nimport SortableBlock from './PromptBuilder/SortableBlock';\nimport Sandbox from './Sandbox';\nimport Modal from '../common/Modal';\nimport MaterialListForModal from './MaterialListForModal';\nimport PromptListForModal from './PromptListForModal';\n\n// Import API Services\nimport { getMaterials, getTeacherPrompts, savePrompt, updatePrompt, getPromptDetails } from '../../services/api';\n\n// Import Icons\nimport { FaSave, FaPlusCircle, FaEdit, FaInfoCircle, FaFileUpload, FaHistory, FaQuestion, FaSyncAlt, FaSpinner, FaGripVertical } from 'react-icons/fa'; // Added missing imports\n\n// Import Styles\nimport '../../styles/PromptWorkshop.css';\n\n// Block Types Definition\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BlockTypes = {\n  PALETTE_ITEM: 'palette-item',\n  CANVAS_BLOCK: 'canvas-block',\n  MATERIAL_SUMMARY: 'material-summary',\n  CUSTOM_TEXT: 'custom-text'\n};\n\n// YOUR Categorized Pre-made Blocks - Assuming this structure exists or you'll provide your exact one\nconst initialPreMadeBlocks = {\n  '🎯 Core & Persona': [{\n    id: 'core-task-1',\n    type: BlockTypes.PALETTE_ITEM,\n    title: 'Core Task',\n    content: 'Act as a helpful AI Teaching Assistant for [Grade Level] students focusing on [Subject/Topic].'\n  }, {\n    id: 'persona-expert-1',\n    type: BlockTypes.PALETTE_ITEM,\n    title: 'Expert Persona',\n    content: 'Adopt the persona of a knowledgeable and engaging expert in [Subject/Topic]. Explain concepts clearly.'\n  }, {\n    id: 'persona-mentor-1',\n    type: BlockTypes.PALETTE_ITEM,\n    title: 'Mentor Persona',\n    content: 'Adopt the persona of a supportive mentor, guiding students through their learning journey.'\n  }],\n  '🗣️ Tone & Style': [{\n    id: 'tone-friendly-1',\n    type: BlockTypes.PALETTE_ITEM,\n    title: 'Friendly & Encouraging',\n    content: 'Maintain a friendly, patient, and encouraging tone throughout the conversation. Use positive reinforcement.'\n  }, {\n    id: 'tone-formal-1',\n    type: BlockTypes.PALETTE_ITEM,\n    title: 'Formal & Academic',\n    content: 'Adopt a formal, objective, and academic tone suitable for serious study.'\n  }, {\n    id: 'style-concise-1',\n    type: BlockTypes.PALETTE_ITEM,\n    title: 'Concise Answers',\n    content: 'Keep your explanations clear, to the point, and as concise as possible without losing meaning.'\n  }, {\n    id: 'style-detailed-1',\n    type: BlockTypes.PALETTE_ITEM,\n    title: 'Detailed Explanations',\n    content: 'Provide detailed explanations, offering background, examples, and analogies where helpful.'\n  }],\n  '📚 Context & Knowledge': [{\n    id: 'ctx-material-1',\n    type: BlockTypes.PALETTE_ITEM,\n    title: 'Use Provided Material ONLY',\n    content: 'Strictly base your answers and explanations on the lesson materials and context provided. If information is not present, state that clearly and do not invent answers.'\n  }, {\n    id: 'ctx-summarize-material-1',\n    type: BlockTypes.PALETTE_ITEM,\n    title: 'Refer to Specific Material',\n    content: 'When answering, explicitly refer to specific sections or ideas from [Name of Material Block] if relevant.'\n  }],\n  '💡 Teaching Strategies': [{\n    id: 'strat-socratic-1',\n    type: BlockTypes.PALETTE_ITEM,\n    title: 'Socratic Questioning',\n    content: 'Instead of giving direct answers, guide students by asking a series of probing questions to help them arrive at the solution themselves.'\n  }, {\n    id: 'strat-stepbystep-1',\n    type: BlockTypes.PALETTE_ITEM,\n    title: 'Step-by-Step Breakdown',\n    content: 'For complex problems or processes, break them down into smaller, logical, and easy-to-follow steps. Explain each step clearly.'\n  }, {\n    id: 'strat-analogy-1',\n    type: BlockTypes.PALETTE_ITEM,\n    title: 'Use Analogies',\n    content: 'Use relevant analogies and real-world examples to make abstract concepts more understandable.'\n  }],\n  '✅ Examples & Scaffolding': [{\n    id: 'ex-positive-1',\n    type: BlockTypes.PALETTE_ITEM,\n    title: 'Positive Example Q&A',\n    content: 'Example Student Question: [Simple Question]\\nExample Good AI Answer: [Clear, helpful, guiding answer based on your persona/tone]'\n  }, {\n    id: 'scaffold-hints-1',\n    type: BlockTypes.PALETTE_ITEM,\n    title: 'Provide Hints',\n    content: 'If a student is stuck, offer a small hint or a reminder of a relevant concept before providing more direct help.'\n  }],\n  '🛡️ Safety & Ethics': [{\n    id: 'safe-offtopic-1',\n    type: BlockTypes.PALETTE_ITEM,\n    title: 'Decline Off-Topic/Inappropriate',\n    content: 'Politely refuse to answer questions that are unrelated to the subject, inappropriate, harmful, unethical, or request personal information.'\n  }, {\n    id: 'safe-no-pii-1',\n    type: BlockTypes.PALETTE_ITEM,\n    title: 'No Personal Information',\n    content: 'Do not ask for, request, store, or share any personally identifiable information (PII) from or about the student or others.'\n  }]\n};\n\n// Guided Tour Steps (Keep your existing steps here or adjust)\nconst guidedSteps = [{\n  selector: '.workshop-column-palette .block-palette',\n  content: '1. Block Library: Select a category, then click a block to add it to the canvas on the right.'\n}, {\n  selector: '.prompt-canvas-section',\n  content: '2. Prompt Canvas: Build the AI\\'s instructions here. Drag blocks to reorder, edit their content (double-click custom blocks), or delete them.'\n}, {\n  selector: '.prompt-metadata-controls',\n  content: '3. Details & Actions: Name your AI Assistant, add a description for students, and set its visibility. Use the buttons to Save, create a New assistant, add Material Context, or Load a saved assistant.'\n}, {\n  selector: '.workshop-sandbox-area .sandbox',\n  content: '4. Test Sandbox: Test your AI assistant in real-time! Type a student\\'s question to see how the AI responds based on the prompt you\\'ve built.'\n}];\nfunction PromptWorkshop() {\n  _s();\n  const [materials, setMaterials] = useState([]);\n  const [savedPrompts, setSavedPrompts] = useState([]);\n  const [currentPrompt, setCurrentPrompt] = useState({\n    id: null,\n    name: '',\n    description: '',\n    is_public: false,\n    structure: [],\n    system_prompt: ''\n  });\n  const [activeId, setActiveId] = useState(null);\n  const [loadingState, setLoadingState] = useState({\n    materials: true,\n    prompts: true,\n    promptDetails: false\n  });\n  const [isSaving, setIsSaving] = useState(false);\n  const [messages, setMessages] = useState({\n    error: '',\n    success: ''\n  });\n  const [showLoadPromptModal, setShowLoadPromptModal] = useState(false);\n  const [showAddMaterialModal, setShowAddMaterialModal] = useState(false);\n  const [isTutorialActive, setIsTutorialActive] = useState(false);\n  const [tutorialStep, setTutorialStep] = useState(0);\n  const highlightedElementRef = useRef(null);\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 8\n    }\n  }), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n  const clearMessages = useCallback(() => setMessages({\n    error: '',\n    success: ''\n  }), []);\n  const showSuccess = useCallback((msg, dur = 3500) => {\n    setMessages({\n      error: '',\n      success: msg\n    });\n    setTimeout(clearMessages, dur);\n  }, [clearMessages]);\n  const showError = useCallback(msg => {\n    setMessages({\n      error: msg,\n      success: ''\n    });\n  }, []);\n  const fetchAllMaterials = useCallback(async () => {\n    setLoadingState(s => ({\n      ...s,\n      materials: true\n    }));\n    try {\n      const r = await getMaterials();\n      setMaterials(r.data || []);\n    } catch (e) {\n      console.error(\"Error fetching materials:\", e);\n      showError(\"Could not load materials.\");\n      setMaterials([]);\n    } finally {\n      setLoadingState(s => ({\n        ...s,\n        materials: false\n      }));\n    }\n  }, [showError]);\n  const fetchAllPrompts = useCallback(async () => {\n    setLoadingState(s => ({\n      ...s,\n      prompts: true\n    }));\n    try {\n      const r = await getTeacherPrompts();\n      setSavedPrompts(r.data || []);\n    } catch (e) {\n      console.error(\"Error fetching prompts:\", e);\n      showError(\"Could not load saved prompts.\");\n      setSavedPrompts([]);\n    } finally {\n      setLoadingState(s => ({\n        ...s,\n        prompts: false\n      }));\n    }\n  }, [showError]);\n  useEffect(() => {\n    fetchAllMaterials();\n    fetchAllPrompts();\n  }, [fetchAllMaterials, fetchAllPrompts]);\n  const handleAddBlock = useCallback(blockFromPalette => {\n    clearMessages();\n    const newBlock = {\n      id: `canvas-${uuidv4()}`,\n      type: BlockTypes.CANVAS_BLOCK,\n      title: blockFromPalette.title,\n      content: blockFromPalette.content\n    };\n    console.log(\"PromptWorkshop: Adding new block:\", newBlock);\n    setCurrentPrompt(p => ({\n      ...p,\n      structure: [...p.structure, newBlock]\n    }));\n  }, [clearMessages]);\n  const handleAddMaterialSummary = useCallback(material => {\n    clearMessages();\n    if (!(material !== null && material !== void 0 && material.id)) {\n      showError(\"Invalid material selected.\");\n      return;\n    }\n    const summaryBlock = {\n      id: `mat-${material.id}-${uuidv4()}`,\n      type: BlockTypes.MATERIAL_SUMMARY,\n      title: `📄 Context from: ${material.name}`,\n      content: `[USE_FULL_TEXT_FROM_MATERIAL_ID:${material.id}] Information from material titled \"${material.name}\".`,\n      isMaterialBlock: true,\n      materialId: material.id,\n      materialName: material.name\n    };\n    setCurrentPrompt(prev => ({\n      ...prev,\n      structure: [...prev.structure, summaryBlock]\n    }));\n    showSuccess(`Context from \"${material.name}\" added (AI will use full text).`);\n    setShowAddMaterialModal(false);\n  }, [clearMessages, showError, showSuccess]);\n  const handleAddCustomTextBlock = useCallback(() => {\n    clearMessages();\n    const nb = {\n      id: `custom-${uuidv4()}`,\n      type: BlockTypes.CUSTOM_TEXT,\n      title: '✏️ Custom Instruction',\n      content: 'Enter your custom instruction...'\n    };\n    setCurrentPrompt(p => ({\n      ...p,\n      structure: [...p.structure, nb]\n    }));\n  }, [clearMessages]);\n  const handleDeleteBlock = useCallback(id => {\n    clearMessages();\n    setCurrentPrompt(p => ({\n      ...p,\n      structure: p.structure.filter(b => b.id !== id)\n    }));\n  }, [clearMessages]);\n  const handleUpdateBlockContent = useCallback((id, content) => {\n    clearMessages();\n    setCurrentPrompt(p => ({\n      ...p,\n      structure: p.structure.map(b => b.id === id ? {\n        ...b,\n        content\n      } : b)\n    }));\n  }, [clearMessages]);\n  const handlePromptNameChange = e => setCurrentPrompt(p => ({\n    ...p,\n    name: e.target.value\n  }));\n  const handlePromptDescriptionChange = e => setCurrentPrompt(p => ({\n    ...p,\n    description: e.target.value\n  }));\n  const handlePromptPublicToggle = e => setCurrentPrompt(p => ({\n    ...p,\n    is_public: e.target.checked\n  }));\n  const handleSavePrompt = useCallback(async () => {\n    clearMessages();\n    if (!currentPrompt.name.trim()) {\n      showError(\"AI Assistant Name is required.\");\n      return;\n    }\n    // No need to check for empty structure if backend handles it gracefully\n    setIsSaving(true);\n    const payload = {\n      name: currentPrompt.name.trim(),\n      description: currentPrompt.description.trim(),\n      is_public: currentPrompt.is_public,\n      structure: currentPrompt.structure\n    };\n    try {\n      let response;\n      let msg = '';\n      if (currentPrompt.id) {\n        response = await updatePrompt(currentPrompt.id, payload);\n        msg = `Assistant \"${response.data.name}\" updated successfully.`;\n        setSavedPrompts(prev => prev.map(p => p.id === response.data.id ? {\n          ...p,\n          ...response.data\n        } : p));\n        // The response.data for PUT /prompts only contains metadata, not full structure/system_prompt.\n        // We trust the payload.structure for visual consistency unless fetching details again.\n        // Backend should have rebuilt and saved the system_prompt.\n        // Fetch details again to get the updated system_prompt for the sandbox accurately.\n        const updatedDetails = await getPromptDetails(currentPrompt.id);\n        setCurrentPrompt(prev => ({\n          ...prev,\n          ...updatedDetails.data\n        }));\n      } else {\n        response = await savePrompt(payload);\n        msg = `Assistant \"${response.data.name}\" created successfully.`;\n        // Response for new prompt also includes the backend-generated system_prompt.\n        setCurrentPrompt(prev => ({\n          ...prev,\n          id: response.data.id,\n          ...response.data,\n          system_prompt: response.data.system_prompt\n        }));\n        setSavedPrompts(prev => [response.data, ...prev]);\n      }\n      showSuccess(msg);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(\"Error saving prompt:\", err);\n      showError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || \"Failed to save AI assistant.\");\n    } finally {\n      setIsSaving(false);\n    }\n  }, [currentPrompt, showError, showSuccess, clearMessages]);\n  const handleLoadPrompt = useCallback(async promptToLoad => {\n    clearMessages();\n    if (!(promptToLoad !== null && promptToLoad !== void 0 && promptToLoad.id)) {\n      showError(\"Invalid assistant selected.\");\n      setShowLoadPromptModal(false);\n      return;\n    }\n    setLoadingState(s => ({\n      ...s,\n      promptDetails: true\n    }));\n    try {\n      const response = await getPromptDetails(promptToLoad.id);\n      const fp = response.data;\n      setCurrentPrompt({\n        id: fp.id,\n        name: fp.name || '',\n        description: fp.description || '',\n        is_public: !!fp.is_public,\n        structure: Array.isArray(fp.structure) ? fp.structure : [],\n        system_prompt: fp.system_prompt || '' // This comes from backend\n      });\n      showSuccess(`Loaded assistant: \"${fp.name}\"`);\n    } catch (err) {\n      console.error(\"Error loading prompt details:\", err);\n      showError(`Failed to load \"${promptToLoad.name}\".`);\n    } finally {\n      setLoadingState(s => ({\n        ...s,\n        promptDetails: false\n      }));\n      setShowLoadPromptModal(false);\n    }\n  }, [showError, showSuccess, clearMessages]);\n  const handleNewPrompt = useCallback(() => {\n    clearMessages();\n    setCurrentPrompt({\n      id: null,\n      name: '',\n      description: '',\n      is_public: false,\n      structure: [],\n      system_prompt: ''\n    });\n    showSuccess(\"New assistant canvas is ready.\");\n  }, [clearMessages, showSuccess]);\n  const handleDragStart = event => {\n    clearMessages();\n    setActiveId(event.active.id);\n  };\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n    setActiveId(null);\n    if (over && active.id !== over.id) {\n      const oldIdx = currentPrompt.structure.findIndex(i => i.id === active.id);\n      const newIdx = currentPrompt.structure.findIndex(i => i.id === over.id);\n      if (oldIdx !== -1 && newIdx !== -1) {\n        setCurrentPrompt(p => ({\n          ...p,\n          structure: arrayMove(p.structure, oldIdx, newIdx)\n        }));\n      }\n    }\n  };\n  const draggedBlockData = activeId ? currentPrompt.structure.find(b => b.id === activeId) : null;\n  // Sandbox needs either the locally constructed prompt from current blocks, or if a prompt is loaded, its specific system_prompt\n  const systemPromptForSandbox = currentPrompt.system_prompt ? currentPrompt.system_prompt : currentPrompt.structure.map(block => block.content).join(\"\\n\\n\");\n  const startTutorial = () => {\n    setIsTutorialActive(true);\n    setTutorialStep(0);\n  };\n  const nextTutorialStep = () => {\n    if (tutorialStep < guidedSteps.length - 1) setTutorialStep(s => s + 1);else setIsTutorialActive(false);\n  };\n  const endTutorial = () => {\n    if (highlightedElementRef.current) {\n      highlightedElementRef.current.classList.remove('tutorial-highlight');\n      highlightedElementRef.current = null;\n    }\n    setIsTutorialActive(false);\n  };\n  useEffect(() => {\n    if (highlightedElementRef.current) {\n      highlightedElementRef.current.classList.remove('tutorial-highlight');\n      highlightedElementRef.current = null;\n    }\n    if (isTutorialActive && guidedSteps[tutorialStep]) {\n      const selector = guidedSteps[tutorialStep].selector;\n      try {\n        const element = document.querySelector(selector);\n        if (element) {\n          element.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n            inline: 'nearest'\n          });\n          element.classList.add('tutorial-highlight');\n          highlightedElementRef.current = element;\n        } else {\n          console.warn(`Tutorial: Element \"${selector}\" not found for step ${tutorialStep}.`);\n        }\n      } catch (e) {\n        console.warn(`Tutorial: Invalid selector \"${selector}\" for step ${tutorialStep}.`);\n      }\n    }\n    return () => {\n      if (highlightedElementRef.current) {\n        highlightedElementRef.current.classList.remove('tutorial-highlight');\n      }\n    };\n  }, [isTutorialActive, tutorialStep]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prompt-workshop-page page-content-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [/*#__PURE__*/_jsxDEV(FaEdit, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this), \" AI Assistant Workshop\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startTutorial,\n        className: \"button subtle-button\",\n        children: [/*#__PURE__*/_jsxDEV(FaQuestion, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 21\n        }, this), \" Quick Tour\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this), (messages.error || messages.success) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message global-message ${messages.error ? 'error-message' : 'success-message'}`,\n      children: [messages.error || messages.success, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearMessages,\n        title: \"Dismiss\",\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(DndContext, {\n      sensors: sensors,\n      collisionDetection: closestCenter,\n      onDragStart: handleDragStart,\n      onDragEnd: handleDragEnd,\n      measuring: {\n        droppable: {\n          strategy: MeasuringStrategy.Always\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prompt-workshop-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"workshop-main-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n            className: \"workshop-column workshop-column-palette\",\n            children: /*#__PURE__*/_jsxDEV(BlockPalette, {\n              blocksByCategory: initialPreMadeBlocks,\n              onAddBlock: handleAddBlock,\n              onAddCustom: handleAddCustomTextBlock\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n            className: \"workshop-column workshop-column-canvas\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"prompt-canvas-section widget\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"prompt-metadata-controls\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"prompt-meta-row-1\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    placeholder: \"AI Assistant Name (Required)\",\n                    value: currentPrompt.name,\n                    onChange: handlePromptNameChange,\n                    className: \"prompt-name-input\",\n                    required: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 249,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"prompt-actions-main\",\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"button primary-button\",\n                      onClick: handleSavePrompt,\n                      disabled: isSaving || !currentPrompt.name.trim(),\n                      children: [\" \", /*#__PURE__*/_jsxDEV(FaSave, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 251,\n                        columnNumber: 165\n                      }, this), \" \", isSaving ? 'Saving...' : currentPrompt.id ? 'Update' : 'Save New', \" \"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 251,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: handleNewPrompt,\n                      className: \"button subtle-button\",\n                      title: \"Clear Canvas & Start New\",\n                      children: [/*#__PURE__*/_jsxDEV(FaSyncAlt, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 252,\n                        columnNumber: 145\n                      }, this), \" New \"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 252,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 250,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 248,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"prompt-meta-row-2\",\n                  children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n                    placeholder: \"Short description for students (optional)...\",\n                    value: currentPrompt.description,\n                    onChange: handlePromptDescriptionChange,\n                    className: \"prompt-description-input\",\n                    rows: 2\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 256,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"prompt-actions-extra\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"prompt-load-add-buttons\",\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"button subtle-button\",\n                      onClick: () => setShowAddMaterialModal(true),\n                      title: \"Add context from your uploaded material\",\n                      children: [/*#__PURE__*/_jsxDEV(FaFileUpload, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 260,\n                        columnNumber: 180\n                      }, this), \" Add Material Context\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 260,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"button subtle-button\",\n                      onClick: () => setShowLoadPromptModal(true),\n                      title: \"Load a previously saved assistant\",\n                      children: [/*#__PURE__*/_jsxDEV(FaHistory, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 261,\n                        columnNumber: 173\n                      }, this), \" Load Assistant\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 261,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 259,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"prompt-public-toggle\",\n                    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"checkbox\",\n                      id: `is_public_toggle_PW_${currentPrompt.id || 'newP'}`,\n                      checked: currentPrompt.is_public,\n                      onChange: handlePromptPublicToggle,\n                      disabled: isSaving\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 264,\n                      columnNumber: 45\n                    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                      htmlFor: `is_public_toggle_PW_${currentPrompt.id || 'newP'}`,\n                      className: currentPrompt.is_public ? 'is-public' : '',\n                      title: \"Make this available to students?\",\n                      children: currentPrompt.is_public ? 'Public (Students can use)' : 'Private (Teachers only)'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 265,\n                      columnNumber: 45\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 263,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(SortableContext, {\n                items: currentPrompt.structure.map(b => b.id),\n                strategy: verticalListSortingStrategy,\n                children: /*#__PURE__*/_jsxDEV(PromptBuilder, {\n                  blocks: currentPrompt.structure,\n                  onDeleteBlock: handleDeleteBlock,\n                  onUpdateBlockContent: handleUpdateBlockContent,\n                  activeId: activeId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"workshop-sandbox-area\",\n          children: /*#__PURE__*/_jsxDEV(Sandbox, {\n            currentPromptStructure: currentPrompt.structure,\n            systemPromptForSandbox: systemPromptForSandbox // Pass the determined system prompt\n            ,\n            promptIdToUseIfNoStructure: currentPrompt.id,\n            showError: showError,\n            showSuccess: showSuccess,\n            clearMessages: clearMessages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DragOverlay, {\n        dropAnimation: null,\n        children: activeId && draggedBlockData ? /*#__PURE__*/_jsxDEV(SortableBlock, {\n          id: draggedBlockData.id,\n          block: draggedBlockData,\n          isDraggingOverlay: true,\n          onDeleteBlock: () => {},\n          onUpdateBlockContent: () => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 54\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }, this), showLoadPromptModal && /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Load Saved AI Assistant\",\n      onClose: () => setShowLoadPromptModal(false),\n      width: \"700px\",\n      showFooter: true,\n      children: loadingState.promptDetails ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-items modal-loading\",\n        children: [/*#__PURE__*/_jsxDEV(FaSpinner, {\n          className: \"spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 96\n        }, this), \" Fetching details...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 51\n      }, this) : /*#__PURE__*/_jsxDEV(PromptListForModal, {\n        prompts: savedPrompts,\n        onLoadPrompt: handleLoadPrompt,\n        isLoading: loadingState.prompts,\n        currentPromptId: currentPrompt.id,\n        showError: showError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 17\n    }, this), showAddMaterialModal && /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Add Material Context to Prompt\",\n      onClose: () => setShowAddMaterialModal(false),\n      width: \"700px\",\n      showFooter: true,\n      children: /*#__PURE__*/_jsxDEV(MaterialListForModal, {\n        materials: materials,\n        onMaterialClick: handleAddMaterialSummary,\n        isLoading: loadingState.materials,\n        showError: showError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 17\n    }, this), isTutorialActive && guidedSteps[tutorialStep] && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tutorial-overlay-backdrop\",\n      onClick: endTutorial,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tutorial-tooltip-wrapper\",\n        style: {/* Consider JS positioning */},\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tutorial-tooltip\",\n          onClick: e => e.stopPropagation(),\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: guidedSteps[tutorialStep].content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              marginTop: '1em',\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: tutorialStep > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => setTutorialStep(s => s - 1),\n                className: \"button subtle-button small\",\n                children: \"Previous\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 58\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Step \", tutorialStep + 1, \" of \", guidedSteps.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: nextTutorialStep,\n                className: \"button primary-button small\",\n                children: tutorialStep < guidedSteps.length - 1 ? 'Next' : 'Finish'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 37\n              }, this), tutorialStep < guidedSteps.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: endTutorial,\n                className: \"button subtle-button small close-tutorial\",\n                children: \"Skip\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 79\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 9\n  }, this);\n}\n_s(PromptWorkshop, \"anZRQ1OyddjHDA54J2lSxljAlCw=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c = PromptWorkshop;\nexport default PromptWorkshop;\nvar _c;\n$RefreshReg$(_c, \"PromptWorkshop\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","DndContext","DragOverlay","closestCenter","PointerSensor","KeyboardSensor","useSensor","useSensors","MeasuringStrategy","SortableContext","arrayMove","verticalListSortingStrategy","sortableKeyboardCoordinates","v4","uuidv4","BlockPalette","PromptBuilder","SortableBlock","Sandbox","Modal","MaterialListForModal","PromptListForModal","getMaterials","getTeacherPrompts","savePrompt","updatePrompt","getPromptDetails","FaSave","FaPlusCircle","FaEdit","FaInfoCircle","FaFileUpload","FaHistory","FaQuestion","FaSyncAlt","FaSpinner","FaGripVertical","jsxDEV","_jsxDEV","BlockTypes","PALETTE_ITEM","CANVAS_BLOCK","MATERIAL_SUMMARY","CUSTOM_TEXT","initialPreMadeBlocks","id","type","title","content","guidedSteps","selector","PromptWorkshop","_s","materials","setMaterials","savedPrompts","setSavedPrompts","currentPrompt","setCurrentPrompt","name","description","is_public","structure","system_prompt","activeId","setActiveId","loadingState","setLoadingState","prompts","promptDetails","isSaving","setIsSaving","messages","setMessages","error","success","showLoadPromptModal","setShowLoadPromptModal","showAddMaterialModal","setShowAddMaterialModal","isTutorialActive","setIsTutorialActive","tutorialStep","setTutorialStep","highlightedElementRef","sensors","activationConstraint","distance","coordinateGetter","clearMessages","showSuccess","msg","dur","setTimeout","showError","fetchAllMaterials","s","r","data","e","console","fetchAllPrompts","handleAddBlock","blockFromPalette","newBlock","log","p","handleAddMaterialSummary","material","summaryBlock","isMaterialBlock","materialId","materialName","prev","handleAddCustomTextBlock","nb","handleDeleteBlock","filter","b","handleUpdateBlockContent","map","handlePromptNameChange","target","value","handlePromptDescriptionChange","handlePromptPublicToggle","checked","handleSavePrompt","trim","payload","response","updatedDetails","err","_err$response","_err$response$data","handleLoadPrompt","promptToLoad","fp","Array","isArray","handleNewPrompt","handleDragStart","event","active","handleDragEnd","over","oldIdx","findIndex","i","newIdx","draggedBlockData","find","systemPromptForSandbox","block","join","startTutorial","nextTutorialStep","length","endTutorial","current","classList","remove","element","document","querySelector","scrollIntoView","behavior","inline","add","warn","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","collisionDetection","onDragStart","onDragEnd","measuring","droppable","strategy","Always","blocksByCategory","onAddBlock","onAddCustom","placeholder","onChange","required","disabled","rows","htmlFor","items","blocks","onDeleteBlock","onUpdateBlockContent","currentPromptStructure","promptIdToUseIfNoStructure","dropAnimation","isDraggingOverlay","onClose","width","showFooter","onLoadPrompt","isLoading","currentPromptId","onMaterialClick","style","stopPropagation","marginTop","display","justifyContent","alignItems","_c","$RefreshReg$"],"sources":["/Users/tommys/Desktop/ai14/frontend/src/components/Dashboard/PromptWorkshop.js"],"sourcesContent":["// frontend/src/components/Dashboard/PromptWorkshop.js\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport {\n    DndContext, DragOverlay, closestCenter, PointerSensor, KeyboardSensor,\n    useSensor, useSensors, MeasuringStrategy\n} from '@dnd-kit/core';\nimport {\n    SortableContext, arrayMove, verticalListSortingStrategy, sortableKeyboardCoordinates\n} from '@dnd-kit/sortable';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Import Workshop Specific Components\nimport BlockPalette from './BlockPalette';\nimport PromptBuilder from './PromptBuilder/PromptBuilder';\nimport SortableBlock from './PromptBuilder/SortableBlock';\nimport Sandbox from './Sandbox';\nimport Modal from '../common/Modal';\nimport MaterialListForModal from './MaterialListForModal';\nimport PromptListForModal from './PromptListForModal';\n\n// Import API Services\nimport { getMaterials, getTeacherPrompts, savePrompt, updatePrompt, getPromptDetails } from '../../services/api';\n\n// Import Icons\nimport { FaSave, FaPlusCircle, FaEdit, FaInfoCircle, FaFileUpload, FaHistory, FaQuestion, FaSyncAlt, FaSpinner, FaGripVertical } from 'react-icons/fa'; // Added missing imports\n\n// Import Styles\nimport '../../styles/PromptWorkshop.css';\n\n// Block Types Definition\nexport const BlockTypes = {\n    PALETTE_ITEM: 'palette-item',\n    CANVAS_BLOCK: 'canvas-block',\n    MATERIAL_SUMMARY: 'material-summary',\n    CUSTOM_TEXT: 'custom-text',\n};\n\n// YOUR Categorized Pre-made Blocks - Assuming this structure exists or you'll provide your exact one\nconst initialPreMadeBlocks = {\n    '🎯 Core & Persona': [\n        { id: 'core-task-1', type: BlockTypes.PALETTE_ITEM, title: 'Core Task', content: 'Act as a helpful AI Teaching Assistant for [Grade Level] students focusing on [Subject/Topic].' },\n        { id: 'persona-expert-1', type: BlockTypes.PALETTE_ITEM, title: 'Expert Persona', content: 'Adopt the persona of a knowledgeable and engaging expert in [Subject/Topic]. Explain concepts clearly.' },\n        { id: 'persona-mentor-1', type: BlockTypes.PALETTE_ITEM, title: 'Mentor Persona', content: 'Adopt the persona of a supportive mentor, guiding students through their learning journey.' },\n    ],\n    '🗣️ Tone & Style': [\n        { id: 'tone-friendly-1', type: BlockTypes.PALETTE_ITEM, title: 'Friendly & Encouraging', content: 'Maintain a friendly, patient, and encouraging tone throughout the conversation. Use positive reinforcement.' },\n        { id: 'tone-formal-1', type: BlockTypes.PALETTE_ITEM, title: 'Formal & Academic', content: 'Adopt a formal, objective, and academic tone suitable for serious study.' },\n        { id: 'style-concise-1', type: BlockTypes.PALETTE_ITEM, title: 'Concise Answers', content: 'Keep your explanations clear, to the point, and as concise as possible without losing meaning.' },\n        { id: 'style-detailed-1', type: BlockTypes.PALETTE_ITEM, title: 'Detailed Explanations', content: 'Provide detailed explanations, offering background, examples, and analogies where helpful.' },\n    ],\n    '📚 Context & Knowledge': [\n        { id: 'ctx-material-1', type: BlockTypes.PALETTE_ITEM, title: 'Use Provided Material ONLY', content: 'Strictly base your answers and explanations on the lesson materials and context provided. If information is not present, state that clearly and do not invent answers.' },\n        { id: 'ctx-summarize-material-1', type: BlockTypes.PALETTE_ITEM, title: 'Refer to Specific Material', content: 'When answering, explicitly refer to specific sections or ideas from [Name of Material Block] if relevant.' },\n    ],\n    '💡 Teaching Strategies': [\n        { id: 'strat-socratic-1', type: BlockTypes.PALETTE_ITEM, title: 'Socratic Questioning', content: 'Instead of giving direct answers, guide students by asking a series of probing questions to help them arrive at the solution themselves.' },\n        { id: 'strat-stepbystep-1', type: BlockTypes.PALETTE_ITEM, title: 'Step-by-Step Breakdown', content: 'For complex problems or processes, break them down into smaller, logical, and easy-to-follow steps. Explain each step clearly.' },\n        { id: 'strat-analogy-1', type: BlockTypes.PALETTE_ITEM, title: 'Use Analogies', content: 'Use relevant analogies and real-world examples to make abstract concepts more understandable.' },\n    ],\n    '✅ Examples & Scaffolding': [\n        { id: 'ex-positive-1', type: BlockTypes.PALETTE_ITEM, title: 'Positive Example Q&A', content: 'Example Student Question: [Simple Question]\\nExample Good AI Answer: [Clear, helpful, guiding answer based on your persona/tone]' },\n        { id: 'scaffold-hints-1', type: BlockTypes.PALETTE_ITEM, title: 'Provide Hints', content: 'If a student is stuck, offer a small hint or a reminder of a relevant concept before providing more direct help.' },\n    ],\n    '🛡️ Safety & Ethics': [\n        { id: 'safe-offtopic-1', type: BlockTypes.PALETTE_ITEM, title: 'Decline Off-Topic/Inappropriate', content: 'Politely refuse to answer questions that are unrelated to the subject, inappropriate, harmful, unethical, or request personal information.' },\n        { id: 'safe-no-pii-1', type: BlockTypes.PALETTE_ITEM, title: 'No Personal Information', content: 'Do not ask for, request, store, or share any personally identifiable information (PII) from or about the student or others.' },\n    ]\n};\n\n\n// Guided Tour Steps (Keep your existing steps here or adjust)\nconst guidedSteps = [\n    { selector: '.workshop-column-palette .block-palette', content: '1. Block Library: Select a category, then click a block to add it to the canvas on the right.' },\n    { selector: '.prompt-canvas-section', content: '2. Prompt Canvas: Build the AI\\'s instructions here. Drag blocks to reorder, edit their content (double-click custom blocks), or delete them.' },\n    { selector: '.prompt-metadata-controls', content: '3. Details & Actions: Name your AI Assistant, add a description for students, and set its visibility. Use the buttons to Save, create a New assistant, add Material Context, or Load a saved assistant.' },\n    { selector: '.workshop-sandbox-area .sandbox', content: '4. Test Sandbox: Test your AI assistant in real-time! Type a student\\'s question to see how the AI responds based on the prompt you\\'ve built.' }\n];\n\n\nfunction PromptWorkshop() {\n    const [materials, setMaterials] = useState([]);\n    const [savedPrompts, setSavedPrompts] = useState([]);\n    const [currentPrompt, setCurrentPrompt] = useState({ id: null, name: '', description: '', is_public: false, structure: [], system_prompt: '' });\n    const [activeId, setActiveId] = useState(null);\n    const [loadingState, setLoadingState] = useState({ materials: true, prompts: true, promptDetails: false });\n    const [isSaving, setIsSaving] = useState(false);\n    const [messages, setMessages] = useState({ error: '', success: '' });\n    const [showLoadPromptModal, setShowLoadPromptModal] = useState(false);\n    const [showAddMaterialModal, setShowAddMaterialModal] = useState(false);\n    const [isTutorialActive, setIsTutorialActive] = useState(false);\n    const [tutorialStep, setTutorialStep] = useState(0);\n    const highlightedElementRef = useRef(null);\n\n    const sensors = useSensors(\n        useSensor(PointerSensor, { activationConstraint: { distance: 8 } }),\n        useSensor(KeyboardSensor, { coordinateGetter: sortableKeyboardCoordinates })\n    );\n\n    const clearMessages = useCallback(() => setMessages({ error: '', success: '' }), []);\n    const showSuccess = useCallback((msg, dur = 3500) => { setMessages({ error: '', success: msg }); setTimeout(clearMessages, dur); }, [clearMessages]);\n    const showError = useCallback((msg) => { setMessages({ error: msg, success: '' }); }, []);\n\n    const fetchAllMaterials = useCallback(async () => { setLoadingState(s => ({ ...s, materials: true })); try { const r = await getMaterials(); setMaterials(r.data || []); } catch (e) { console.error(\"Error fetching materials:\", e); showError(\"Could not load materials.\"); setMaterials([]); } finally { setLoadingState(s => ({ ...s, materials: false })); } }, [showError]);\n    const fetchAllPrompts = useCallback(async () => { setLoadingState(s => ({ ...s, prompts: true })); try { const r = await getTeacherPrompts(); setSavedPrompts(r.data || []); } catch (e) { console.error(\"Error fetching prompts:\", e); showError(\"Could not load saved prompts.\"); setSavedPrompts([]); } finally { setLoadingState(s => ({ ...s, prompts: false })); } }, [showError]);\n    useEffect(() => { fetchAllMaterials(); fetchAllPrompts(); }, [fetchAllMaterials, fetchAllPrompts]);\n\n    const handleAddBlock = useCallback((blockFromPalette) => {\n        clearMessages();\n        const newBlock = {\n            id: `canvas-${uuidv4()}`,\n            type: BlockTypes.CANVAS_BLOCK,\n            title: blockFromPalette.title,\n            content: blockFromPalette.content,\n        };\n        console.log(\"PromptWorkshop: Adding new block:\", newBlock);\n        setCurrentPrompt(p => ({ ...p, structure: [...p.structure, newBlock] }));\n    }, [clearMessages]);\n\n    const handleAddMaterialSummary = useCallback((material) => {\n        clearMessages();\n        if (!material?.id) { showError(\"Invalid material selected.\"); return; }\n        const summaryBlock = { id: `mat-${material.id}-${uuidv4()}`, type: BlockTypes.MATERIAL_SUMMARY, title: `📄 Context from: ${material.name}`, content: `[USE_FULL_TEXT_FROM_MATERIAL_ID:${material.id}] Information from material titled \"${material.name}\".`, isMaterialBlock: true, materialId: material.id, materialName: material.name };\n        setCurrentPrompt(prev => ({ ...prev, structure: [...prev.structure, summaryBlock] }));\n        showSuccess(`Context from \"${material.name}\" added (AI will use full text).`);\n        setShowAddMaterialModal(false);\n    }, [clearMessages, showError, showSuccess]);\n\n    const handleAddCustomTextBlock = useCallback(() => {\n        clearMessages();\n        const nb = { id: `custom-${uuidv4()}`, type: BlockTypes.CUSTOM_TEXT, title: '✏️ Custom Instruction', content: 'Enter your custom instruction...' };\n        setCurrentPrompt(p => ({ ...p, structure: [...p.structure, nb] }));\n    }, [clearMessages]);\n\n    const handleDeleteBlock = useCallback((id) => { clearMessages(); setCurrentPrompt(p => ({ ...p, structure: p.structure.filter(b => b.id !== id) })); }, [clearMessages]);\n    const handleUpdateBlockContent = useCallback((id, content) => { clearMessages(); setCurrentPrompt(p => ({ ...p, structure: p.structure.map(b => b.id === id ? { ...b, content } : b) })); }, [clearMessages]);\n    const handlePromptNameChange = (e) => setCurrentPrompt(p => ({ ...p, name: e.target.value }));\n    const handlePromptDescriptionChange = (e) => setCurrentPrompt(p => ({ ...p, description: e.target.value }));\n    const handlePromptPublicToggle = (e) => setCurrentPrompt(p => ({ ...p, is_public: e.target.checked }));\n\n    const handleSavePrompt = useCallback(async () => {\n        clearMessages();\n        if (!currentPrompt.name.trim()) { showError(\"AI Assistant Name is required.\"); return; }\n        // No need to check for empty structure if backend handles it gracefully\n        setIsSaving(true);\n        const payload = { name: currentPrompt.name.trim(), description: currentPrompt.description.trim(), is_public: currentPrompt.is_public, structure: currentPrompt.structure };\n        try {\n            let response; let msg = '';\n            if (currentPrompt.id) {\n                response = await updatePrompt(currentPrompt.id, payload);\n                msg = `Assistant \"${response.data.name}\" updated successfully.`;\n                setSavedPrompts(prev => prev.map(p => p.id === response.data.id ? { ...p, ...response.data } : p));\n                // The response.data for PUT /prompts only contains metadata, not full structure/system_prompt.\n                // We trust the payload.structure for visual consistency unless fetching details again.\n                // Backend should have rebuilt and saved the system_prompt.\n                // Fetch details again to get the updated system_prompt for the sandbox accurately.\n                const updatedDetails = await getPromptDetails(currentPrompt.id);\n                setCurrentPrompt(prev => ({ ...prev, ...updatedDetails.data }));\n            } else {\n                response = await savePrompt(payload);\n                msg = `Assistant \"${response.data.name}\" created successfully.`;\n                 // Response for new prompt also includes the backend-generated system_prompt.\n                setCurrentPrompt(prev => ({ ...prev, id: response.data.id, ...response.data, system_prompt: response.data.system_prompt }));\n                setSavedPrompts(prev => [response.data, ...prev]);\n            }\n            showSuccess(msg);\n        } catch (err) {\n            console.error(\"Error saving prompt:\", err);\n            showError(err.response?.data?.error || \"Failed to save AI assistant.\");\n        } finally { setIsSaving(false); }\n    }, [currentPrompt, showError, showSuccess, clearMessages]);\n\n    const handleLoadPrompt = useCallback(async (promptToLoad) => {\n        clearMessages();\n        if (!promptToLoad?.id) { showError(\"Invalid assistant selected.\"); setShowLoadPromptModal(false); return; }\n        setLoadingState(s => ({ ...s, promptDetails: true }));\n        try {\n            const response = await getPromptDetails(promptToLoad.id);\n            const fp = response.data;\n            setCurrentPrompt({\n                id: fp.id, name: fp.name || '', description: fp.description || '',\n                is_public: !!fp.is_public,\n                structure: Array.isArray(fp.structure) ? fp.structure : [],\n                system_prompt: fp.system_prompt || '' // This comes from backend\n            });\n            showSuccess(`Loaded assistant: \"${fp.name}\"`);\n        } catch (err) { console.error(\"Error loading prompt details:\", err); showError(`Failed to load \"${promptToLoad.name}\".`);\n        } finally { setLoadingState(s => ({ ...s, promptDetails: false })); setShowLoadPromptModal(false); }\n    }, [showError, showSuccess, clearMessages]);\n\n    const handleNewPrompt = useCallback(() => { clearMessages(); setCurrentPrompt({ id: null, name: '', description: '', is_public: false, structure: [], system_prompt: '' }); showSuccess(\"New assistant canvas is ready.\"); }, [clearMessages, showSuccess]);\n\n    const handleDragStart = (event) => { clearMessages(); setActiveId(event.active.id); };\n    const handleDragEnd = (event) => { const { active, over } = event; setActiveId(null); if (over && active.id !== over.id) { const oldIdx = currentPrompt.structure.findIndex(i => i.id === active.id); const newIdx = currentPrompt.structure.findIndex(i => i.id === over.id); if (oldIdx !== -1 && newIdx !== -1) { setCurrentPrompt(p => ({ ...p, structure: arrayMove(p.structure, oldIdx, newIdx) })); } } };\n    const draggedBlockData = activeId ? currentPrompt.structure.find(b => b.id === activeId) : null;\n    // Sandbox needs either the locally constructed prompt from current blocks, or if a prompt is loaded, its specific system_prompt\n    const systemPromptForSandbox = currentPrompt.system_prompt ? currentPrompt.system_prompt : currentPrompt.structure.map(block => block.content).join(\"\\n\\n\");\n\n\n    const startTutorial = () => { setIsTutorialActive(true); setTutorialStep(0); };\n    const nextTutorialStep = () => { if (tutorialStep < guidedSteps.length - 1) setTutorialStep(s => s + 1); else setIsTutorialActive(false); };\n    const endTutorial = () => {\n        if (highlightedElementRef.current) {\n            highlightedElementRef.current.classList.remove('tutorial-highlight');\n            highlightedElementRef.current = null;\n        }\n        setIsTutorialActive(false);\n    };\n\n    useEffect(() => {\n        if (highlightedElementRef.current) { highlightedElementRef.current.classList.remove('tutorial-highlight'); highlightedElementRef.current = null; }\n        if (isTutorialActive && guidedSteps[tutorialStep]) {\n            const selector = guidedSteps[tutorialStep].selector;\n            try { const element = document.querySelector(selector); if (element) { element.scrollIntoView({ behavior: 'smooth', block: 'center', inline: 'nearest' }); element.classList.add('tutorial-highlight'); highlightedElementRef.current = element; } else { console.warn(`Tutorial: Element \"${selector}\" not found for step ${tutorialStep}.`); }\n            } catch (e) { console.warn(`Tutorial: Invalid selector \"${selector}\" for step ${tutorialStep}.`); }\n        }\n        return () => { if (highlightedElementRef.current) { highlightedElementRef.current.classList.remove('tutorial-highlight'); } };\n    }, [isTutorialActive, tutorialStep]);\n\n    return (\n        <div className=\"prompt-workshop-page page-content-wrapper\">\n            <div className=\"page-header\">\n                <h2><FaEdit /> AI Assistant Workshop</h2>\n                <button onClick={startTutorial} className=\"button subtle-button\">\n                    <FaQuestion /> Quick Tour\n                </button>\n            </div>\n\n            {(messages.error || messages.success) &&\n                <div className={`message global-message ${messages.error ? 'error-message' : 'success-message'}`}>\n                    {messages.error || messages.success}\n                    <button onClick={clearMessages} title=\"Dismiss\">X</button>\n                </div>\n            }\n\n            <DndContext sensors={sensors} collisionDetection={closestCenter} onDragStart={handleDragStart} onDragEnd={handleDragEnd} measuring={{ droppable: { strategy: MeasuringStrategy.Always } }}>\n                <div className=\"prompt-workshop-container\">\n                    <div className=\"workshop-main-area\">\n                        <aside className=\"workshop-column workshop-column-palette\">\n                            <BlockPalette\n                                blocksByCategory={initialPreMadeBlocks}\n                                onAddBlock={handleAddBlock}\n                                onAddCustom={handleAddCustomTextBlock}\n                            />\n                        </aside>\n                        <main className=\"workshop-column workshop-column-canvas\">\n                            <div className=\"prompt-canvas-section widget\">\n                                <div className=\"prompt-metadata-controls\">\n                                    <div className=\"prompt-meta-row-1\">\n                                        <input type=\"text\" placeholder=\"AI Assistant Name (Required)\" value={currentPrompt.name} onChange={handlePromptNameChange} className=\"prompt-name-input\" required />\n                                        <div className=\"prompt-actions-main\">\n                                            <button className=\"button primary-button\" onClick={handleSavePrompt} disabled={isSaving || !currentPrompt.name.trim()}> <FaSave /> {isSaving ? 'Saving...' : (currentPrompt.id ? 'Update' : 'Save New')} </button>\n                                            <button onClick={handleNewPrompt} className=\"button subtle-button\" title=\"Clear Canvas & Start New\"><FaSyncAlt /> New </button>\n                                        </div>\n                                    </div>\n                                    <div className=\"prompt-meta-row-2\">\n                                        <textarea placeholder=\"Short description for students (optional)...\" value={currentPrompt.description} onChange={handlePromptDescriptionChange} className=\"prompt-description-input\" rows={2} />\n                                    </div>\n                                    <div className=\"prompt-actions-extra\">\n                                        <div className=\"prompt-load-add-buttons\">\n                                            <button className=\"button subtle-button\" onClick={() => setShowAddMaterialModal(true)} title=\"Add context from your uploaded material\"><FaFileUpload /> Add Material Context</button>\n                                            <button className=\"button subtle-button\" onClick={() => setShowLoadPromptModal(true)} title=\"Load a previously saved assistant\"><FaHistory /> Load Assistant</button>\n                                        </div>\n                                        <div className=\"prompt-public-toggle\">\n                                            <input type=\"checkbox\" id={`is_public_toggle_PW_${currentPrompt.id || 'newP'}`} checked={currentPrompt.is_public} onChange={handlePromptPublicToggle} disabled={isSaving} />\n                                            <label htmlFor={`is_public_toggle_PW_${currentPrompt.id || 'newP'}`} className={currentPrompt.is_public ? 'is-public' : ''} title=\"Make this available to students?\">\n                                                {currentPrompt.is_public ? 'Public (Students can use)' : 'Private (Teachers only)'}\n                                            </label>\n                                        </div>\n                                    </div>\n                                </div>\n                                <SortableContext items={currentPrompt.structure.map(b => b.id)} strategy={verticalListSortingStrategy}>\n                                    <PromptBuilder blocks={currentPrompt.structure} onDeleteBlock={handleDeleteBlock} onUpdateBlockContent={handleUpdateBlockContent} activeId={activeId} />\n                                </SortableContext>\n                            </div>\n                        </main>\n                    </div>\n\n                    <div className=\"workshop-sandbox-area\">\n                        <Sandbox\n                            currentPromptStructure={currentPrompt.structure}\n                            systemPromptForSandbox={systemPromptForSandbox} // Pass the determined system prompt\n                            promptIdToUseIfNoStructure={currentPrompt.id}\n                            showError={showError}\n                            showSuccess={showSuccess}\n                            clearMessages={clearMessages}\n                        />\n                    </div>\n                </div>\n\n                <DragOverlay dropAnimation={null}>\n                    {activeId && draggedBlockData ? (<SortableBlock id={draggedBlockData.id} block={draggedBlockData} isDraggingOverlay={true} onDeleteBlock={()=>{}} onUpdateBlockContent={()=>{}} />) : null}\n                </DragOverlay>\n            </DndContext>\n\n            {showLoadPromptModal && (\n                <Modal title=\"Load Saved AI Assistant\" onClose={() => setShowLoadPromptModal(false)} width=\"700px\" showFooter={true}>\n                    {loadingState.promptDetails ? <div className=\"loading-items modal-loading\"><FaSpinner className=\"spin\" /> Fetching details...</div>\n                        : <PromptListForModal prompts={savedPrompts} onLoadPrompt={handleLoadPrompt} isLoading={loadingState.prompts} currentPromptId={currentPrompt.id} showError={showError} />\n                    }\n                </Modal>\n            )}\n            {showAddMaterialModal && (\n                <Modal title=\"Add Material Context to Prompt\" onClose={() => setShowAddMaterialModal(false)} width=\"700px\" showFooter={true}>\n                    <MaterialListForModal materials={materials} onMaterialClick={handleAddMaterialSummary} isLoading={loadingState.materials} showError={showError} />\n                </Modal>\n            )}\n\n            {isTutorialActive && guidedSteps[tutorialStep] && (\n                <div className=\"tutorial-overlay-backdrop\" onClick={endTutorial}>\n                    <div className=\"tutorial-tooltip-wrapper\" style={{ /* Consider JS positioning */ }}>\n                        <div className=\"tutorial-tooltip\" onClick={e => e.stopPropagation()}>\n                            <p>{guidedSteps[tutorialStep].content}</p>\n                            <div style={{ marginTop: '1em', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                                <div>\n                                    {tutorialStep > 0 && <button onClick={() => setTutorialStep(s => s-1)} className='button subtle-button small'>Previous</button>}\n                                </div>\n                                <span>Step {tutorialStep + 1} of {guidedSteps.length}</span>\n                                <div>\n                                    <button onClick={nextTutorialStep} className='button primary-button small'>\n                                        {tutorialStep < guidedSteps.length - 1 ? 'Next' : 'Finish'}\n                                    </button>\n                                    {tutorialStep < guidedSteps.length - 1 && <button onClick={endTutorial} className='button subtle-button small close-tutorial'>Skip</button> }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default PromptWorkshop;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}