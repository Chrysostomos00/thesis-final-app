{"ast":null,"code":"var _jsxFileName = \"/Users/tommys/Desktop/ai14/frontend/src/components/Dashboard/Sandbox.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/Dashboard/Sandbox.jsx\nimport React, { useState, useEffect } from 'react';\nimport { generateTestResponse } from '../../services/api';\nimport { FaPaperPlane, FaSpinner, FaVial, FaLightbulb, FaBroom } from 'react-icons/fa';\nimport '../../styles/TeacherDashboard.css';\nimport '../../styles/Sandbox.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Sandbox({\n  currentPromptStructure,\n  promptIdToUseIfNoStructure,\n  showError,\n  showSuccess,\n  clearMessages\n}) {\n  _s();\n  const [userTestPrompt, setUserTestPrompt] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [usageInfo, setUsageInfo] = useState(null);\n  const [previewSystemPrompt, setPreviewSystemPrompt] = useState('');\n  useEffect(() => {\n    let displayPrompt = '(No prompt instructions defined yet. Add blocks to the canvas or load an assistant.)';\n    if (currentPromptStructure && currentPromptStructure.length > 0) {\n      displayPrompt = currentPromptStructure.map(block => {\n        if (block.isMaterialBlock && block.materialName) {\n          return `[CONTEXT FROM: ${block.materialName} - Full text will be used by AI]`;\n        }\n        return block.content;\n      }).join(\"\\n\\n\");\n    } else if (promptIdToUseIfNoStructure) {\n      displayPrompt = `(Testing saved assistant [ID: ${promptIdToUseIfNoStructure}]. The AI will use its saved instructions.)`;\n    }\n    setPreviewSystemPrompt(displayPrompt);\n  }, [currentPromptStructure, promptIdToUseIfNoStructure]);\n  const handleTestPrompt = async () => {\n    if (clearMessages) clearMessages();\n    if (!userTestPrompt.trim()) {\n      if (showError) showError(\"Please enter a question or phrase in the sandbox to test.\");\n      return;\n    }\n    if ((!currentPromptStructure || currentPromptStructure.length === 0) && !promptIdToUseIfNoStructure) {\n      if (showError) showError(\"Please add blocks to the canvas or load a saved assistant before testing.\");\n      return;\n    }\n    setIsLoading(true);\n    setAiResponse('');\n    setUsageInfo(null);\n    const payload = {\n      user_prompt: userTestPrompt,\n      prompt_structure: currentPromptStructure,\n      prompt_id: promptIdToUseIfNoStructure\n    };\n    try {\n      const response = await generateTestResponse(payload);\n      setAiResponse(response.data.response);\n      setUsageInfo(response.data.usage);\n      if (showSuccess) showSuccess(\"AI response received successfully.\");\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Sandbox generation error:', error);\n      const errMsg = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'An error occurred while generating the response in the sandbox.';\n      if (showError) showError(errMsg);\n      setAiResponse(`Error: ${errMsg}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const clearSandbox = () => {\n    setUserTestPrompt('');\n    setAiResponse('');\n    setUsageInfo(null);\n    if (clearMessages) clearMessages();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"widget sandbox\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [/*#__PURE__*/_jsxDEV(FaVial, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), \" Test Sandbox\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sandbox-instruction\",\n      children: [/*#__PURE__*/_jsxDEV(FaLightbulb, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), \" Test your AI Assistant based on the current instructions in the canvas or the loaded assistant.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sandbox-system-preview\",\n      \"aria-live\": \"polite\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Preview of Instructions (Backend will process fully):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: previewSystemPrompt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sandbox-input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: userTestPrompt,\n        onChange: e => setUserTestPrompt(e.target.value),\n        placeholder: \"Enter a student's question or phrase here...\",\n        rows: 4,\n        disabled: isLoading,\n        \"aria-label\": \"Enter a test question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sandbox-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clearSandbox,\n          className: \"button subtle-button\",\n          disabled: isLoading,\n          title: \"Clear sandbox inputs and response\",\n          children: [/*#__PURE__*/_jsxDEV(FaBroom, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), \" Clear\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTestPrompt,\n          className: \"button primary-button\",\n          disabled: isLoading || !userTestPrompt.trim() || previewSystemPrompt.startsWith('(No prompt'),\n          children: isLoading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(FaSpinner, {\n              className: \"spin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 28\n            }, this), \" Testing...\"]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(FaPaperPlane, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 77\n            }, this), \" Test Prompt\"]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sandbox-output-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"AI Response:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-indicator-sandbox\",\n        children: [/*#__PURE__*/_jsxDEV(FaSpinner, {\n          className: \"spin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 66\n        }, this), \" Thinking...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 23\n      }, this), aiResponse && !isLoading && /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: \"ai-response-text\",\n        children: aiResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 38\n      }, this), !aiResponse && !isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"empty-list-message\",\n        style: {\n          padding: '1rem',\n          fontSize: '0.9em'\n        },\n        children: \"(AI's response will appear here)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 39\n      }, this), usageInfo && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"usage-info\",\n        children: [\"(Tokens Used: Prompt=\", usageInfo.prompt_tokens, \", Completion=\", usageInfo.completion_tokens, \", Total=\", usageInfo.total_tokens, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(Sandbox, \"gqL8AgdGR8flWxfmnP/ziwq5Vss=\");\n_c = Sandbox;\nexport default Sandbox;\nvar _c;\n$RefreshReg$(_c, \"Sandbox\");","map":{"version":3,"names":["React","useState","useEffect","generateTestResponse","FaPaperPlane","FaSpinner","FaVial","FaLightbulb","FaBroom","jsxDEV","_jsxDEV","Fragment","_Fragment","Sandbox","currentPromptStructure","promptIdToUseIfNoStructure","showError","showSuccess","clearMessages","_s","userTestPrompt","setUserTestPrompt","aiResponse","setAiResponse","isLoading","setIsLoading","usageInfo","setUsageInfo","previewSystemPrompt","setPreviewSystemPrompt","displayPrompt","length","map","block","isMaterialBlock","materialName","content","join","handleTestPrompt","trim","payload","user_prompt","prompt_structure","prompt_id","response","data","usage","error","_error$response","_error$response$data","console","errMsg","clearSandbox","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","rows","disabled","onClick","title","startsWith","style","padding","fontSize","prompt_tokens","completion_tokens","total_tokens","_c","$RefreshReg$"],"sources":["/Users/tommys/Desktop/ai14/frontend/src/components/Dashboard/Sandbox.js"],"sourcesContent":["// frontend/src/components/Dashboard/Sandbox.jsx\nimport React, { useState, useEffect } from 'react';\nimport { generateTestResponse } from '../../services/api';\nimport { FaPaperPlane, FaSpinner, FaVial, FaLightbulb, FaBroom } from 'react-icons/fa';\nimport '../../styles/TeacherDashboard.css';\nimport '../../styles/Sandbox.css';\n\nfunction Sandbox({\n  currentPromptStructure,\n  promptIdToUseIfNoStructure,\n  showError,\n  showSuccess,\n  clearMessages\n}) {\n  const [userTestPrompt, setUserTestPrompt] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [usageInfo, setUsageInfo] = useState(null);\n  const [previewSystemPrompt, setPreviewSystemPrompt] = useState('');\n\n  useEffect(() => {\n    let displayPrompt = '(No prompt instructions defined yet. Add blocks to the canvas or load an assistant.)';\n    if (currentPromptStructure && currentPromptStructure.length > 0) {\n      displayPrompt = currentPromptStructure.map(block => {\n        if (block.isMaterialBlock && block.materialName) {\n          return `[CONTEXT FROM: ${block.materialName} - Full text will be used by AI]`;\n        }\n        return block.content;\n      }).join(\"\\n\\n\");\n    } else if (promptIdToUseIfNoStructure) {\n      displayPrompt = `(Testing saved assistant [ID: ${promptIdToUseIfNoStructure}]. The AI will use its saved instructions.)`;\n    }\n    setPreviewSystemPrompt(displayPrompt);\n  }, [currentPromptStructure, promptIdToUseIfNoStructure]);\n\n  const handleTestPrompt = async () => {\n    if (clearMessages) clearMessages();\n\n    if (!userTestPrompt.trim()) {\n      if (showError) showError(\"Please enter a question or phrase in the sandbox to test.\");\n      return;\n    }\n    if ((!currentPromptStructure || currentPromptStructure.length === 0) && !promptIdToUseIfNoStructure) {\n      if (showError) showError(\"Please add blocks to the canvas or load a saved assistant before testing.\");\n      return;\n    }\n\n    setIsLoading(true);\n    setAiResponse('');\n    setUsageInfo(null);\n\n    const payload = {\n      user_prompt: userTestPrompt,\n      prompt_structure: currentPromptStructure,\n      prompt_id: promptIdToUseIfNoStructure\n    };\n\n    try {\n      const response = await generateTestResponse(payload);\n      setAiResponse(response.data.response);\n      setUsageInfo(response.data.usage);\n      if (showSuccess) showSuccess(\"AI response received successfully.\");\n    } catch (error) {\n      console.error('Sandbox generation error:', error);\n      const errMsg = error.response?.data?.error || 'An error occurred while generating the response in the sandbox.';\n      if (showError) showError(errMsg);\n      setAiResponse(`Error: ${errMsg}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const clearSandbox = () => {\n    setUserTestPrompt('');\n    setAiResponse('');\n    setUsageInfo(null);\n    if (clearMessages) clearMessages();\n  };\n\n  return (\n    <div className=\"widget sandbox\">\n      <h3><FaVial /> Test Sandbox</h3>\n      <p className=\"sandbox-instruction\">\n        <FaLightbulb /> Test your AI Assistant based on the current instructions in the canvas or the loaded assistant.\n      </p>\n\n      <div className=\"sandbox-system-preview\" aria-live=\"polite\">\n        <strong>Preview of Instructions (Backend will process fully):</strong>\n        <pre>{previewSystemPrompt}</pre>\n      </div>\n\n      <div className=\"sandbox-input-area\">\n        <textarea\n          value={userTestPrompt}\n          onChange={(e) => setUserTestPrompt(e.target.value)}\n          placeholder=\"Enter a student's question or phrase here...\"\n          rows={4}\n          disabled={isLoading}\n          aria-label=\"Enter a test question\"\n        />\n        <div className=\"sandbox-actions\">\n          <button onClick={clearSandbox} className=\"button subtle-button\" disabled={isLoading} title=\"Clear sandbox inputs and response\">\n            <FaBroom /> Clear\n          </button>\n          <button\n            onClick={handleTestPrompt}\n            className=\"button primary-button\"\n            disabled={isLoading || !userTestPrompt.trim() || previewSystemPrompt.startsWith('(No prompt')}\n          >\n            {isLoading ? <><FaSpinner className=\"spin\" /> Testing...</> : <><FaPaperPlane /> Test Prompt</>}\n          </button>\n        </div>\n      </div>\n\n      <div className=\"sandbox-output-area\">\n        <strong>AI Response:</strong>\n        {isLoading && <div className=\"loading-indicator-sandbox\"><FaSpinner className=\"spin\" /> Thinking...</div>}\n        {aiResponse && !isLoading && <pre className=\"ai-response-text\">{aiResponse}</pre>}\n        {!aiResponse && !isLoading && <p className=\"empty-list-message\" style={{ padding: '1rem', fontSize: '0.9em' }}>(AI's response will appear here)</p>}\n        {usageInfo && (\n          <p className=\"usage-info\">\n            (Tokens Used: Prompt={usageInfo.prompt_tokens}, Completion={usageInfo.completion_tokens}, Total={usageInfo.total_tokens})\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Sandbox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}