{"ast":null,"code":"var _jsxFileName = \"/Users/tommys/Desktop/ai14/frontend/src/components/Dashboard/BlockPalette.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/Dashboard/BlockPalette.js\nimport React, { useState } from 'react';\nimport { FaPlusCircle, FaEdit, FaChevronDown, FaChevronRight } from 'react-icons/fa';\n// CSS for palette now primarily comes from PromptWorkshop.css, ensure this import is correct if used\nimport '../../styles/PromptWorkshop.css'; // Relative path assuming this file is in src/components/Dashboard/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BlockPalette({\n  blocksByCategory,\n  onAddBlock,\n  onAddCustom\n}) {\n  _s();\n  // Initialize all categories as closed by default\n  const [openCategories, setOpenCategories] = useState({});\n  const toggleCategory = categoryName => {\n    setOpenCategories(prev => ({\n      ...prev,\n      // Keep states of other categories\n      [categoryName]: !prev[categoryName] // Toggle only the clicked one\n    }));\n  };\n\n  // Check if blocksByCategory is provided and not empty\n  if (!blocksByCategory || Object.keys(blocksByCategory).length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"widget block-palette\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [/*#__PURE__*/_jsxDEV(FaPlusCircle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this), \" Block Library\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"palette-instruction empty-list-message\",\n        style: {\n          textAlign: 'left',\n          border: 'none',\n          padding: '0'\n        },\n        children: \"No pre-made blocks available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onAddCustom,\n        className: \"add-custom-button button secondary-button\",\n        children: [/*#__PURE__*/_jsxDEV(FaEdit, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this), \" Add Custom Instruction\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"widget block-palette\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [/*#__PURE__*/_jsxDEV(FaPlusCircle, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), \" Block Library\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"palette-instruction\",\n      children: \"Select a category, then click a block to add it to the canvas.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), Object.entries(blocksByCategory).map(([categoryName, blocks]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"palette-category\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\" // Explicitly set type for buttons\n        ,\n        className: \"palette-category-title subtle-button\",\n        onClick: () => toggleCategory(categoryName),\n        \"aria-expanded\": !!openCategories[categoryName],\n        \"aria-controls\": `category-blocks-${categoryName.replace(/\\s+/g, '-')}`,\n        title: `Toggle ${categoryName} blocks`,\n        children: [openCategories[categoryName] ? /*#__PURE__*/_jsxDEV(FaChevronDown, {\n          size: \"0.9em\",\n          style: {\n            marginRight: '0.4em'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 57\n        }, this) : /*#__PURE__*/_jsxDEV(FaChevronRight, {\n          size: \"0.9em\",\n          style: {\n            marginRight: '0.4em'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 122\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: categoryName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            marginLeft: 'auto',\n            fontSize: '0.8em',\n            color: 'var(--text-color-muted)'\n          },\n          children: [\"(\", blocks.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this), openCategories[categoryName] && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"palette-grid\",\n        id: `category-blocks-${categoryName.replace(/\\s+/g, '-')}`,\n        children: blocks.map(block => {\n          // Logic to extract icon from title if it's an emoji\n          const titleParts = block.title.split(' ');\n          const iconEmoji = titleParts[0].length <= 2 && /\\p{Emoji}/u.test(titleParts[0]) ? titleParts[0] : null;\n          const textTitle = iconEmoji ? titleParts.slice(1).join(' ') : block.title;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"palette-block\",\n            title: block.content // Tooltip for full content\n            ,\n            onClick: () => onAddBlock(block) // This is the click handler\n            ,\n            role: \"button\" // For accessibility\n            ,\n            tabIndex: 0 // For keyboard accessibility\n            ,\n            onKeyPress: e => (e.key === 'Enter' || e.key === ' ') && onAddBlock(block) // Keyboard activation\n            ,\n            children: [iconEmoji && /*#__PURE__*/_jsxDEV(\"span\", {\n              \"aria-hidden\": \"true\",\n              style: {\n                marginRight: '0.5em',\n                fontSize: '1.1em'\n              },\n              children: iconEmoji\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 55\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: textTitle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 41\n            }, this)]\n          }, block.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 37\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 25\n      }, this)]\n    }, categoryName, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onAddCustom,\n      className: \"add-custom-button button secondary-button\",\n      children: [/*#__PURE__*/_jsxDEV(FaEdit, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), \" Add Custom Instruction\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(BlockPalette, \"0z2H8z31uAzl/nQPvIN57ZqKKzA=\");\n_c = BlockPalette;\nexport default BlockPalette;\nvar _c;\n$RefreshReg$(_c, \"BlockPalette\");","map":{"version":3,"names":["React","useState","FaPlusCircle","FaEdit","FaChevronDown","FaChevronRight","jsxDEV","_jsxDEV","BlockPalette","blocksByCategory","onAddBlock","onAddCustom","_s","openCategories","setOpenCategories","toggleCategory","categoryName","prev","Object","keys","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","border","padding","onClick","entries","map","blocks","type","replace","title","size","marginRight","marginLeft","fontSize","color","id","block","titleParts","split","iconEmoji","test","textTitle","slice","join","content","role","tabIndex","onKeyPress","e","key","_c","$RefreshReg$"],"sources":["/Users/tommys/Desktop/ai14/frontend/src/components/Dashboard/BlockPalette.js"],"sourcesContent":["// frontend/src/components/Dashboard/BlockPalette.js\nimport React, { useState } from 'react';\nimport { FaPlusCircle, FaEdit, FaChevronDown, FaChevronRight } from 'react-icons/fa';\n// CSS for palette now primarily comes from PromptWorkshop.css, ensure this import is correct if used\nimport '../../styles/PromptWorkshop.css'; // Relative path assuming this file is in src/components/Dashboard/\n\nfunction BlockPalette({ blocksByCategory, onAddBlock, onAddCustom }) {\n    // Initialize all categories as closed by default\n    const [openCategories, setOpenCategories] = useState({});\n\n    const toggleCategory = (categoryName) => {\n        setOpenCategories(prev => ({\n            ...prev, // Keep states of other categories\n            [categoryName]: !prev[categoryName] // Toggle only the clicked one\n        }));\n    };\n\n    // Check if blocksByCategory is provided and not empty\n    if (!blocksByCategory || Object.keys(blocksByCategory).length === 0) {\n        return (\n            <div className=\"widget block-palette\">\n                <h3><FaPlusCircle /> Block Library</h3>\n                <p className=\"palette-instruction empty-list-message\" style={{textAlign: 'left', border: 'none', padding: '0'}}>\n                    No pre-made blocks available.\n                </p>\n                 <button onClick={onAddCustom} className=\"add-custom-button button secondary-button\">\n                    <FaEdit /> Add Custom Instruction\n                </button>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"widget block-palette\">\n            <h3><FaPlusCircle /> Block Library</h3>\n            <p className=\"palette-instruction\">Select a category, then click a block to add it to the canvas.</p>\n\n            {Object.entries(blocksByCategory).map(([categoryName, blocks]) => (\n                <div key={categoryName} className=\"palette-category\">\n                    <button\n                        type=\"button\" // Explicitly set type for buttons\n                        className=\"palette-category-title subtle-button\"\n                        onClick={() => toggleCategory(categoryName)}\n                        aria-expanded={!!openCategories[categoryName]}\n                        aria-controls={`category-blocks-${categoryName.replace(/\\s+/g, '-')}`}\n                        title={`Toggle ${categoryName} blocks`}\n                    >\n                        {/* Using a conditional span or different icons can improve visual cue */}\n                        {openCategories[categoryName] ? <FaChevronDown size=\"0.9em\" style={{ marginRight: '0.4em' }}/> : <FaChevronRight size=\"0.9em\" style={{ marginRight: '0.4em' }}/>}\n                        <span>{categoryName}</span>\n                        <span style={{ marginLeft: 'auto', fontSize: '0.8em', color: 'var(--text-color-muted)' }}>({blocks.length})</span>\n                    </button>\n\n                    {openCategories[categoryName] && (\n                        <div className=\"palette-grid\" id={`category-blocks-${categoryName.replace(/\\s+/g, '-')}`}>\n                            {blocks.map((block) => {\n                                // Logic to extract icon from title if it's an emoji\n                                const titleParts = block.title.split(' ');\n                                const iconEmoji = titleParts[0].length <= 2 && /\\p{Emoji}/u.test(titleParts[0]) ? titleParts[0] : null;\n                                const textTitle = iconEmoji ? titleParts.slice(1).join(' ') : block.title;\n\n                                return (\n                                    <div\n                                        key={block.id}\n                                        className=\"palette-block\"\n                                        title={block.content} // Tooltip for full content\n                                        onClick={() => onAddBlock(block)} // This is the click handler\n                                        role=\"button\" // For accessibility\n                                        tabIndex={0} // For keyboard accessibility\n                                        onKeyPress={(e) => (e.key === 'Enter' || e.key === ' ') && onAddBlock(block)} // Keyboard activation\n                                    >\n                                        {iconEmoji && <span aria-hidden=\"true\" style={{marginRight: '0.5em', fontSize: '1.1em'}}>{iconEmoji}</span>}\n                                        <strong>{textTitle}</strong>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    )}\n                </div>\n            ))}\n\n            <button onClick={onAddCustom} className=\"add-custom-button button secondary-button\">\n                <FaEdit /> Add Custom Instruction\n            </button>\n        </div>\n    );\n}\n\nexport default BlockPalette;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}